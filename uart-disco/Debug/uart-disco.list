
uart-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000324c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003484  08003484  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800348c  0800348c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800348c  0800348c  0001348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08003504  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08003504  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076fb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c0  00000000  00000000  00027794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00028f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00029618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015165  00000000  00000000  00029c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007854  00000000  00000000  0003edb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008205a  00000000  00000000  00046609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c8663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e4c  00000000  00000000  000c86b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003370 	.word	0x08003370

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003370 	.word	0x08003370

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f000 fb6d 	bl	8000b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f80a 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f000 f8aa 	bl	80005d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000484:	f000 f854 	bl	8000530 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000488:	f000 f87c 	bl	8000584 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  show_menu();
 800048c:	f000 f9b2 	bl	80007f4 <show_menu>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000490:	e7fe      	b.n	8000490 <main+0x1c>
	...

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b092      	sub	sp, #72	; 0x48
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	2234      	movs	r2, #52	; 0x34
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 fb22 	bl	8002aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b6:	4b1d      	ldr	r3, [pc, #116]	; (800052c <SystemClock_Config+0x98>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004be:	4a1b      	ldr	r2, [pc, #108]	; (800052c <SystemClock_Config+0x98>)
 80004c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004c6:	2302      	movs	r3, #2
 80004c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ca:	2301      	movs	r3, #1
 80004cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ce:	2310      	movs	r3, #16
 80004d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d2:	2302      	movs	r3, #2
 80004d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d6:	2300      	movs	r3, #0
 80004d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80004de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80004e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80004e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 fee0 	bl	80012b0 <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004f6:	f000 f9e7 	bl	80008c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	230f      	movs	r3, #15
 80004fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	2303      	movs	r3, #3
 8000500:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050e:	463b      	mov	r3, r7
 8000510:	2101      	movs	r1, #1
 8000512:	4618      	mov	r0, r3
 8000514:	f001 f9fc 	bl	8001910 <HAL_RCC_ClockConfig>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800051e:	f000 f9d3 	bl	80008c8 <Error_Handler>
  }
}
 8000522:	bf00      	nop
 8000524:	3748      	adds	r7, #72	; 0x48
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40007000 	.word	0x40007000

08000530 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000536:	4a12      	ldr	r2, [pc, #72]	; (8000580 <MX_USART2_UART_Init+0x50>)
 8000538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800053c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_USART2_UART_Init+0x4c>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_USART2_UART_Init+0x4c>)
 8000568:	f001 fc66 	bl	8001e38 <HAL_UART_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000572:	f000 f9a9 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	2000014c 	.word	0x2000014c
 8000580:	40004400 	.word	0x40004400

08000584 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <MX_USART3_UART_Init+0x50>)
 800058c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800058e:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 8000590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_8;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005ba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <MX_USART3_UART_Init+0x4c>)
 80005be:	f001 fc3b 	bl	8001e38 <HAL_UART_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 80005c8:	f000 f97e 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000d0 	.word	0x200000d0
 80005d4:	40004800 	.word	0x40004800

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <MX_GPIO_Init+0x98>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a1f      	ldr	r2, [pc, #124]	; (8000670 <MX_GPIO_Init+0x98>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_GPIO_Init+0x98>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_GPIO_Init+0x98>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <MX_GPIO_Init+0x98>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_GPIO_Init+0x98>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	4814      	ldr	r0, [pc, #80]	; (8000674 <MX_GPIO_Init+0x9c>)
 8000624:	f000 fe12 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000628:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800062c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000636:	2303      	movs	r3, #3
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800063a:	2307      	movs	r3, #7
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	4619      	mov	r1, r3
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_GPIO_Init+0xa0>)
 8000646:	f000 fc81 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_GPIO_Init+0x9c>)
 8000662:	f000 fc73 	bl	8000f4c <HAL_GPIO_Init>

}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40020400 	.word	0x40020400
 8000678:	40020000 	.word	0x40020000

0800067c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

	uint8_t buf[20];
	int buf_len;


	if(uart3_buf[0] == '1'){
 8000684:	4b51      	ldr	r3, [pc, #324]	; (80007cc <HAL_UART_RxCpltCallback+0x150>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b31      	cmp	r3, #49	; 0x31
 800068a:	d124      	bne.n	80006d6 <HAL_UART_RxCpltCallback+0x5a>

		HAL_UART_Transmit(&huart2, (uint8_t*)"1", 1, HAL_MAX_DELAY);
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	2201      	movs	r2, #1
 8000692:	494f      	ldr	r1, [pc, #316]	; (80007d0 <HAL_UART_RxCpltCallback+0x154>)
 8000694:	484f      	ldr	r0, [pc, #316]	; (80007d4 <HAL_UART_RxCpltCallback+0x158>)
 8000696:	f001 fc1c 	bl	8001ed2 <HAL_UART_Transmit>

		//wait for answer from nRF52832
		HAL_UART_Receive(&huart2, buf, 9, HAL_MAX_DELAY);
 800069a:	f107 010c 	add.w	r1, r7, #12
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	2209      	movs	r2, #9
 80006a4:	484b      	ldr	r0, [pc, #300]	; (80007d4 <HAL_UART_RxCpltCallback+0x158>)
 80006a6:	f001 fca6 	bl	8001ff6 <HAL_UART_Receive>

		//just for visualization
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	484a      	ldr	r0, [pc, #296]	; (80007d8 <HAL_UART_RxCpltCallback+0x15c>)
 80006ae:	f000 fde5 	bl	800127c <HAL_GPIO_TogglePin>

		//check answer in terminal
		HAL_UART_Transmit(&huart3, buf, 9, HAL_MAX_DELAY);
 80006b2:	f107 010c 	add.w	r1, r7, #12
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ba:	2209      	movs	r2, #9
 80006bc:	4847      	ldr	r0, [pc, #284]	; (80007dc <HAL_UART_RxCpltCallback+0x160>)
 80006be:	f001 fc08 	bl	8001ed2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	2202      	movs	r2, #2
 80006c8:	4945      	ldr	r1, [pc, #276]	; (80007e0 <HAL_UART_RxCpltCallback+0x164>)
 80006ca:	4844      	ldr	r0, [pc, #272]	; (80007dc <HAL_UART_RxCpltCallback+0x160>)
 80006cc:	f001 fc01 	bl	8001ed2 <HAL_UART_Transmit>

		show_menu();
 80006d0:	f000 f890 	bl	80007f4 <show_menu>
		//check answer in terminal
		HAL_UART_Transmit(&huart3, uart2_buf, 3, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
		show_menu();
	}
}
 80006d4:	e075      	b.n	80007c2 <HAL_UART_RxCpltCallback+0x146>
	}else if(uart3_buf[0] == '2'){
 80006d6:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <HAL_UART_RxCpltCallback+0x150>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b32      	cmp	r3, #50	; 0x32
 80006dc:	d124      	bne.n	8000728 <HAL_UART_RxCpltCallback+0xac>
		HAL_UART_Transmit(&huart2, (uint8_t*)"2", 1, HAL_MAX_DELAY);
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	2201      	movs	r2, #1
 80006e4:	493f      	ldr	r1, [pc, #252]	; (80007e4 <HAL_UART_RxCpltCallback+0x168>)
 80006e6:	483b      	ldr	r0, [pc, #236]	; (80007d4 <HAL_UART_RxCpltCallback+0x158>)
 80006e8:	f001 fbf3 	bl	8001ed2 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, buf, 3, HAL_MAX_DELAY);
 80006ec:	f107 010c 	add.w	r1, r7, #12
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2203      	movs	r2, #3
 80006f6:	4837      	ldr	r0, [pc, #220]	; (80007d4 <HAL_UART_RxCpltCallback+0x158>)
 80006f8:	f001 fc7d 	bl	8001ff6 <HAL_UART_Receive>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	4836      	ldr	r0, [pc, #216]	; (80007d8 <HAL_UART_RxCpltCallback+0x15c>)
 8000700:	f000 fdbc 	bl	800127c <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart3, buf, 3, HAL_MAX_DELAY);
 8000704:	f107 010c 	add.w	r1, r7, #12
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	2203      	movs	r2, #3
 800070e:	4833      	ldr	r0, [pc, #204]	; (80007dc <HAL_UART_RxCpltCallback+0x160>)
 8000710:	f001 fbdf 	bl	8001ed2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	2202      	movs	r2, #2
 800071a:	4931      	ldr	r1, [pc, #196]	; (80007e0 <HAL_UART_RxCpltCallback+0x164>)
 800071c:	482f      	ldr	r0, [pc, #188]	; (80007dc <HAL_UART_RxCpltCallback+0x160>)
 800071e:	f001 fbd8 	bl	8001ed2 <HAL_UART_Transmit>
		show_menu();
 8000722:	f000 f867 	bl	80007f4 <show_menu>
}
 8000726:	e04c      	b.n	80007c2 <HAL_UART_RxCpltCallback+0x146>
	}else if(uart3_buf[0] == '3'){
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <HAL_UART_RxCpltCallback+0x150>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b33      	cmp	r3, #51	; 0x33
 800072e:	d122      	bne.n	8000776 <HAL_UART_RxCpltCallback+0xfa>
		HAL_UART_Transmit(&huart2, (uint8_t*)"3", 1, HAL_MAX_DELAY);
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	2201      	movs	r2, #1
 8000736:	492c      	ldr	r1, [pc, #176]	; (80007e8 <HAL_UART_RxCpltCallback+0x16c>)
 8000738:	4826      	ldr	r0, [pc, #152]	; (80007d4 <HAL_UART_RxCpltCallback+0x158>)
 800073a:	f001 fbca 	bl	8001ed2 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, uart2_buf, 2, HAL_MAX_DELAY);
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	2202      	movs	r2, #2
 8000744:	4929      	ldr	r1, [pc, #164]	; (80007ec <HAL_UART_RxCpltCallback+0x170>)
 8000746:	4823      	ldr	r0, [pc, #140]	; (80007d4 <HAL_UART_RxCpltCallback+0x158>)
 8000748:	f001 fc55 	bl	8001ff6 <HAL_UART_Receive>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	4822      	ldr	r0, [pc, #136]	; (80007d8 <HAL_UART_RxCpltCallback+0x15c>)
 8000750:	f000 fd94 	bl	800127c <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart3, uart2_buf, 2, HAL_MAX_DELAY);
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	2202      	movs	r2, #2
 800075a:	4924      	ldr	r1, [pc, #144]	; (80007ec <HAL_UART_RxCpltCallback+0x170>)
 800075c:	481f      	ldr	r0, [pc, #124]	; (80007dc <HAL_UART_RxCpltCallback+0x160>)
 800075e:	f001 fbb8 	bl	8001ed2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	2202      	movs	r2, #2
 8000768:	491d      	ldr	r1, [pc, #116]	; (80007e0 <HAL_UART_RxCpltCallback+0x164>)
 800076a:	481c      	ldr	r0, [pc, #112]	; (80007dc <HAL_UART_RxCpltCallback+0x160>)
 800076c:	f001 fbb1 	bl	8001ed2 <HAL_UART_Transmit>
		show_menu();
 8000770:	f000 f840 	bl	80007f4 <show_menu>
}
 8000774:	e025      	b.n	80007c2 <HAL_UART_RxCpltCallback+0x146>
	}else if(uart3_buf[0] == '4'){
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_UART_RxCpltCallback+0x150>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b34      	cmp	r3, #52	; 0x34
 800077c:	d121      	bne.n	80007c2 <HAL_UART_RxCpltCallback+0x146>
		HAL_UART_Transmit(&huart2, (uint8_t*)"4", 1, HAL_MAX_DELAY);
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	2201      	movs	r2, #1
 8000784:	491a      	ldr	r1, [pc, #104]	; (80007f0 <HAL_UART_RxCpltCallback+0x174>)
 8000786:	4813      	ldr	r0, [pc, #76]	; (80007d4 <HAL_UART_RxCpltCallback+0x158>)
 8000788:	f001 fba3 	bl	8001ed2 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, uart2_buf, 3, HAL_MAX_DELAY);
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
 8000790:	2203      	movs	r2, #3
 8000792:	4916      	ldr	r1, [pc, #88]	; (80007ec <HAL_UART_RxCpltCallback+0x170>)
 8000794:	480f      	ldr	r0, [pc, #60]	; (80007d4 <HAL_UART_RxCpltCallback+0x158>)
 8000796:	f001 fc2e 	bl	8001ff6 <HAL_UART_Receive>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	480e      	ldr	r0, [pc, #56]	; (80007d8 <HAL_UART_RxCpltCallback+0x15c>)
 800079e:	f000 fd6d 	bl	800127c <HAL_GPIO_TogglePin>
		HAL_UART_Transmit(&huart3, uart2_buf, 3, HAL_MAX_DELAY);
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	2203      	movs	r2, #3
 80007a8:	4910      	ldr	r1, [pc, #64]	; (80007ec <HAL_UART_RxCpltCallback+0x170>)
 80007aa:	480c      	ldr	r0, [pc, #48]	; (80007dc <HAL_UART_RxCpltCallback+0x160>)
 80007ac:	f001 fb91 	bl	8001ed2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	2202      	movs	r2, #2
 80007b6:	490a      	ldr	r1, [pc, #40]	; (80007e0 <HAL_UART_RxCpltCallback+0x164>)
 80007b8:	4808      	ldr	r0, [pc, #32]	; (80007dc <HAL_UART_RxCpltCallback+0x160>)
 80007ba:	f001 fb8a 	bl	8001ed2 <HAL_UART_Transmit>
		show_menu();
 80007be:	f000 f819 	bl	80007f4 <show_menu>
}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000118 	.word	0x20000118
 80007d0:	08003388 	.word	0x08003388
 80007d4:	2000014c 	.word	0x2000014c
 80007d8:	40020400 	.word	0x40020400
 80007dc:	200000d0 	.word	0x200000d0
 80007e0:	0800338c 	.word	0x0800338c
 80007e4:	08003390 	.word	0x08003390
 80007e8:	08003394 	.word	0x08003394
 80007ec:	2000009c 	.word	0x2000009c
 80007f0:	08003398 	.word	0x08003398

080007f4 <show_menu>:

void show_menu(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	  uart3_buf_len = sprintf(uart3_buf, "Welcome to nRF52832 - STM32L152 UART app\r\n");
 80007f8:	492b      	ldr	r1, [pc, #172]	; (80008a8 <show_menu+0xb4>)
 80007fa:	482c      	ldr	r0, [pc, #176]	; (80008ac <show_menu+0xb8>)
 80007fc:	f002 f97e 	bl	8002afc <siprintf>
 8000800:	4603      	mov	r3, r0
 8000802:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <show_menu+0xbc>)
 8000804:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000806:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <show_menu+0xbc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	b29a      	uxth	r2, r3
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	4926      	ldr	r1, [pc, #152]	; (80008ac <show_menu+0xb8>)
 8000812:	4828      	ldr	r0, [pc, #160]	; (80008b4 <show_menu+0xc0>)
 8000814:	f001 fb5d 	bl	8001ed2 <HAL_UART_Transmit>

	  uart3_buf_len = sprintf(uart3_buf, "1. Connect to Polar H10\r\n");
 8000818:	4927      	ldr	r1, [pc, #156]	; (80008b8 <show_menu+0xc4>)
 800081a:	4824      	ldr	r0, [pc, #144]	; (80008ac <show_menu+0xb8>)
 800081c:	f002 f96e 	bl	8002afc <siprintf>
 8000820:	4603      	mov	r3, r0
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <show_menu+0xbc>)
 8000824:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <show_menu+0xbc>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	b29a      	uxth	r2, r3
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	491e      	ldr	r1, [pc, #120]	; (80008ac <show_menu+0xb8>)
 8000832:	4820      	ldr	r0, [pc, #128]	; (80008b4 <show_menu+0xc0>)
 8000834:	f001 fb4d 	bl	8001ed2 <HAL_UART_Transmit>

	  uart3_buf_len = sprintf(uart3_buf, "2. Disconnect from Polar H10\r\n");
 8000838:	4920      	ldr	r1, [pc, #128]	; (80008bc <show_menu+0xc8>)
 800083a:	481c      	ldr	r0, [pc, #112]	; (80008ac <show_menu+0xb8>)
 800083c:	f002 f95e 	bl	8002afc <siprintf>
 8000840:	4603      	mov	r3, r0
 8000842:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <show_menu+0xbc>)
 8000844:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <show_menu+0xbc>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	b29a      	uxth	r2, r3
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	4916      	ldr	r1, [pc, #88]	; (80008ac <show_menu+0xb8>)
 8000852:	4818      	ldr	r0, [pc, #96]	; (80008b4 <show_menu+0xc0>)
 8000854:	f001 fb3d 	bl	8001ed2 <HAL_UART_Transmit>

	  uart3_buf_len = sprintf(uart3_buf, "3. Read heart rate sensor\r\n");
 8000858:	4919      	ldr	r1, [pc, #100]	; (80008c0 <show_menu+0xcc>)
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <show_menu+0xb8>)
 800085c:	f002 f94e 	bl	8002afc <siprintf>
 8000860:	4603      	mov	r3, r0
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <show_menu+0xbc>)
 8000864:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <show_menu+0xbc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	b29a      	uxth	r2, r3
 800086c:	f04f 33ff 	mov.w	r3, #4294967295
 8000870:	490e      	ldr	r1, [pc, #56]	; (80008ac <show_menu+0xb8>)
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <show_menu+0xc0>)
 8000874:	f001 fb2d 	bl	8001ed2 <HAL_UART_Transmit>

	  uart3_buf_len = sprintf(uart3_buf, "4. OTA\r\n");
 8000878:	4912      	ldr	r1, [pc, #72]	; (80008c4 <show_menu+0xd0>)
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <show_menu+0xb8>)
 800087c:	f002 f93e 	bl	8002afc <siprintf>
 8000880:	4603      	mov	r3, r0
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <show_menu+0xbc>)
 8000884:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*)uart3_buf, uart3_buf_len, HAL_MAX_DELAY);
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <show_menu+0xbc>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	b29a      	uxth	r2, r3
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	4906      	ldr	r1, [pc, #24]	; (80008ac <show_menu+0xb8>)
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <show_menu+0xc0>)
 8000894:	f001 fb1d 	bl	8001ed2 <HAL_UART_Transmit>

	 HAL_UART_Receive_IT(&huart3, uart3_buf, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	4904      	ldr	r1, [pc, #16]	; (80008ac <show_menu+0xb8>)
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <show_menu+0xc0>)
 800089e:	f001 fc4c 	bl	800213a <HAL_UART_Receive_IT>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	0800339c 	.word	0x0800339c
 80008ac:	20000118 	.word	0x20000118
 80008b0:	20000114 	.word	0x20000114
 80008b4:	200000d0 	.word	0x200000d0
 80008b8:	080033c8 	.word	0x080033c8
 80008bc:	080033e4 	.word	0x080033e4
 80008c0:	08003404 	.word	0x08003404
 80008c4:	08003420 	.word	0x08003420

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_MspInit+0x5c>)
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_MspInit+0x5c>)
 80008e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008e4:	6253      	str	r3, [r2, #36]	; 0x24
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_MspInit+0x5c>)
 80008e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x5c>)
 80008f4:	6a1b      	ldr	r3, [r3, #32]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_MspInit+0x5c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6213      	str	r3, [r2, #32]
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x5c>)
 8000900:	6a1b      	ldr	r3, [r3, #32]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x5c>)
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x5c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6253      	str	r3, [r2, #36]	; 0x24
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x5c>)
 8000918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000922:	2007      	movs	r0, #7
 8000924:	f000 fa52 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a32      	ldr	r2, [pc, #200]	; (8000a1c <HAL_UART_MspInit+0xe8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d128      	bne.n	80009a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <HAL_UART_MspInit+0xec>)
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	4a31      	ldr	r2, [pc, #196]	; (8000a20 <HAL_UART_MspInit+0xec>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6253      	str	r3, [r2, #36]	; 0x24
 8000962:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <HAL_UART_MspInit+0xec>)
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <HAL_UART_MspInit+0xec>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <HAL_UART_MspInit+0xec>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <HAL_UART_MspInit+0xec>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000986:	230c      	movs	r3, #12
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000996:	2307      	movs	r3, #7
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4820      	ldr	r0, [pc, #128]	; (8000a24 <HAL_UART_MspInit+0xf0>)
 80009a2:	f000 fad3 	bl	8000f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009a6:	e035      	b.n	8000a14 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <HAL_UART_MspInit+0xf4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d130      	bne.n	8000a14 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <HAL_UART_MspInit+0xec>)
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	4a1a      	ldr	r2, [pc, #104]	; (8000a20 <HAL_UART_MspInit+0xec>)
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009bc:	6253      	str	r3, [r2, #36]	; 0x24
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0xec>)
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0xec>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <HAL_UART_MspInit+0xec>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_UART_MspInit+0xec>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009f4:	2307      	movs	r3, #7
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_MspInit+0xf8>)
 8000a00:	f000 faa4 	bl	8000f4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2027      	movs	r0, #39	; 0x27
 8000a0a:	f000 f9ea 	bl	8000de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a0e:	2027      	movs	r0, #39	; 0x27
 8000a10:	f000 fa03 	bl	8000e1a <HAL_NVIC_EnableIRQ>
}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40004800 	.word	0x40004800
 8000a2c:	40020400 	.word	0x40020400

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a76:	f000 f8c1 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <USART3_IRQHandler+0x10>)
 8000a86:	f001 fb89 	bl	800219c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000d0 	.word	0x200000d0

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f001 ffe8 	bl	8002a98 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20008000 	.word	0x20008000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	2000008c 	.word	0x2000008c
 8000afc:	200001a8 	.word	0x200001a8

08000b00 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b32:	f7ff ffe5 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f001 ffb5 	bl	8002aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff fc9b 	bl	8000474 <main>
  bx lr
 8000b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b48:	08003494 	.word	0x08003494
  ldr r2, =_sbss
 8000b4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b50:	200001a4 	.word	0x200001a4

08000b54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_IRQHandler>

08000b56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f933 	bl	8000dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f80e 	bl	8000b88 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	e001      	b.n	8000b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b78:	f7ff feac 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d022      	beq.n	8000be2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_InitTick+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f940 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10f      	bne.n	8000bdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d809      	bhi.n	8000bd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000bca:	f000 f90a 	bl	8000de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_InitTick+0x70>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e007      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e004      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e001      	b.n	8000be6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000190 	.word	0x20000190
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <HAL_GetTick+0x10>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000190 	.word	0x20000190

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4906      	ldr	r1, [pc, #24]	; (8000ccc <__NVIC_EnableIRQ+0x34>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d98:	d301      	bcc.n	8000d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00f      	b.n	8000dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <SysTick_Config+0x40>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da6:	210f      	movs	r1, #15
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f7ff ff90 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <SysTick_Config+0x40>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SysTick_Config+0x40>)
 8000db8:	2207      	movs	r2, #7
 8000dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff2d 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
 8000dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df4:	f7ff ff42 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	68b9      	ldr	r1, [r7, #8]
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff ff90 	bl	8000d24 <NVIC_EncodePriority>
 8000e04:	4602      	mov	r2, r0
 8000e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff5f 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e12:	bf00      	nop
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff35 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffa2 	bl	8000d88 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b085      	sub	sp, #20
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d008      	beq.n	8000e78 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2204      	movs	r2, #4
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e022      	b.n	8000ebe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 020e 	bic.w	r2, r2, #14
 8000e86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 021c 	and.w	r2, r3, #28
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d005      	beq.n	8000eec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e029      	b.n	8000f40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 020e 	bic.w	r2, r2, #14
 8000efa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 021c 	and.w	r2, r3, #28
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f18:	2101      	movs	r1, #1
 8000f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	4798      	blx	r3
    }
  }
  return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f62:	e154      	b.n	800120e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8146 	beq.w	8001208 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d005      	beq.n	8000f94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	f003 0201 	and.w	r2, r3, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d017      	beq.n	8001032 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d123      	bne.n	8001086 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0203 	and.w	r2, r3, #3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 80a0 	beq.w	8001208 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c8:	4b58      	ldr	r3, [pc, #352]	; (800122c <HAL_GPIO_Init+0x2e0>)
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4a57      	ldr	r2, [pc, #348]	; (800122c <HAL_GPIO_Init+0x2e0>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6213      	str	r3, [r2, #32]
 80010d4:	4b55      	ldr	r3, [pc, #340]	; (800122c <HAL_GPIO_Init+0x2e0>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80010e0:	4a53      	ldr	r2, [pc, #332]	; (8001230 <HAL_GPIO_Init+0x2e4>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3302      	adds	r3, #2
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x2e8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d019      	beq.n	8001140 <HAL_GPIO_Init+0x1f4>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <HAL_GPIO_Init+0x2ec>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d013      	beq.n	800113c <HAL_GPIO_Init+0x1f0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_GPIO_Init+0x2f0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d00d      	beq.n	8001138 <HAL_GPIO_Init+0x1ec>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_GPIO_Init+0x2f4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d007      	beq.n	8001134 <HAL_GPIO_Init+0x1e8>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a47      	ldr	r2, [pc, #284]	; (8001244 <HAL_GPIO_Init+0x2f8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d101      	bne.n	8001130 <HAL_GPIO_Init+0x1e4>
 800112c:	2304      	movs	r3, #4
 800112e:	e008      	b.n	8001142 <HAL_GPIO_Init+0x1f6>
 8001130:	2305      	movs	r3, #5
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x1f6>
 8001134:	2303      	movs	r3, #3
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x1f6>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x1f6>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x1f6>
 8001140:	2300      	movs	r3, #0
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001152:	4937      	ldr	r1, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x2e4>)
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001160:	4b39      	ldr	r3, [pc, #228]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001184:	4a30      	ldr	r2, [pc, #192]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011ae:	4a26      	ldr	r2, [pc, #152]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b4:	4b24      	ldr	r3, [pc, #144]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001202:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_GPIO_Init+0x2fc>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	3301      	adds	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	fa22 f303 	lsr.w	r3, r2, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	f47f aea3 	bne.w	8000f64 <HAL_GPIO_Init+0x18>
  }
}
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	371c      	adds	r7, #28
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40010000 	.word	0x40010000
 8001234:	40020000 	.word	0x40020000
 8001238:	40020400 	.word	0x40020400
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40021000 	.word	0x40021000
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001268:	e003      	b.n	8001272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800126a:	887b      	ldrh	r3, [r7, #2]
 800126c:	041a      	lsls	r2, r3, #16
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	619a      	str	r2, [r3, #24]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4013      	ands	r3, r2
 8001294:	041a      	lsls	r2, r3, #16
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	43d9      	mvns	r1, r3
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	400b      	ands	r3, r1
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e31d      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c2:	4b94      	ldr	r3, [pc, #592]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012cc:	4b91      	ldr	r3, [pc, #580]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d07b      	beq.n	80013da <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d006      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	d10f      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f4:	d10b      	bne.n	800130e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	4b87      	ldr	r3, [pc, #540]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06a      	beq.n	80013d8 <HAL_RCC_OscConfig+0x128>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d166      	bne.n	80013d8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e2f7      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x74>
 8001316:	4b7f      	ldr	r3, [pc, #508]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7e      	ldr	r2, [pc, #504]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e02d      	b.n	8001380 <HAL_RCC_OscConfig+0xd0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x96>
 800132c:	4b79      	ldr	r3, [pc, #484]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a78      	ldr	r2, [pc, #480]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b76      	ldr	r3, [pc, #472]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a75      	ldr	r2, [pc, #468]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800133e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0xd0>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0xb8>
 800134e:	4b71      	ldr	r3, [pc, #452]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a70      	ldr	r2, [pc, #448]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6e      	ldr	r3, [pc, #440]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6d      	ldr	r2, [pc, #436]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xd0>
 8001368:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a69      	ldr	r2, [pc, #420]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a66      	ldr	r2, [pc, #408]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fc4a 	bl	8000c20 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fc46 	bl	8000c20 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e2ad      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a2:	4b5c      	ldr	r3, [pc, #368]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xe0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fc36 	bl	8000c20 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fc32 	bl	8000c20 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e299      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x108>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d05a      	beq.n	800149c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d119      	bne.n	8001426 <HAL_RCC_OscConfig+0x176>
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d116      	bne.n	8001426 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f8:	4b46      	ldr	r3, [pc, #280]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_OscConfig+0x160>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d001      	beq.n	8001410 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e276      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	493d      	ldr	r1, [pc, #244]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001424:	e03a      	b.n	800149c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d020      	beq.n	8001470 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x268>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fbf4 	bl	8000c20 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fbf0 	bl	8000c20 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e257      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	492a      	ldr	r1, [pc, #168]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
 800146e:	e015      	b.n	800149c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x268>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fbd3 	bl	8000c20 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147e:	f7ff fbcf 	bl	8000c20 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e236      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80b8 	beq.w	800161a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d170      	bne.n	8001592 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_OscConfig+0x218>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e21a      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1a      	ldr	r2, [r3, #32]
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d921      	bls.n	800151c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fc4b 	bl	8001d78 <RCC_SetFlashLatencyFromMSIRange>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e208      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	061b      	lsls	r3, r3, #24
 800150c:	4901      	ldr	r1, [pc, #4]	; (8001514 <HAL_RCC_OscConfig+0x264>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
 8001512:	e020      	b.n	8001556 <HAL_RCC_OscConfig+0x2a6>
 8001514:	40023800 	.word	0x40023800
 8001518:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800151c:	4ba4      	ldr	r3, [pc, #656]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	49a1      	ldr	r1, [pc, #644]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152e:	4ba0      	ldr	r3, [pc, #640]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	061b      	lsls	r3, r3, #24
 800153c:	499c      	ldr	r1, [pc, #624]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fc16 	bl	8001d78 <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1d3      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	0b5b      	lsrs	r3, r3, #13
 800155c:	3301      	adds	r3, #1
 800155e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001566:	4a92      	ldr	r2, [pc, #584]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001568:	6892      	ldr	r2, [r2, #8]
 800156a:	0912      	lsrs	r2, r2, #4
 800156c:	f002 020f 	and.w	r2, r2, #15
 8001570:	4990      	ldr	r1, [pc, #576]	; (80017b4 <HAL_RCC_OscConfig+0x504>)
 8001572:	5c8a      	ldrb	r2, [r1, r2]
 8001574:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001576:	4a90      	ldr	r2, [pc, #576]	; (80017b8 <HAL_RCC_OscConfig+0x508>)
 8001578:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800157a:	4b90      	ldr	r3, [pc, #576]	; (80017bc <HAL_RCC_OscConfig+0x50c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fb02 	bl	8000b88 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d045      	beq.n	800161a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	e1b5      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d029      	beq.n	80015ee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800159a:	4b89      	ldr	r3, [pc, #548]	; (80017c0 <HAL_RCC_OscConfig+0x510>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb3e 	bl	8000c20 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a8:	f7ff fb3a 	bl	8000c20 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1a1      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ba:	4b7d      	ldr	r3, [pc, #500]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c6:	4b7a      	ldr	r3, [pc, #488]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4977      	ldr	r1, [pc, #476]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d8:	4b75      	ldr	r3, [pc, #468]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	4972      	ldr	r1, [pc, #456]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ee:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x510>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fb14 	bl	8000c20 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fc:	f7ff fb10 	bl	8000c20 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e177      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800160e:	4b68      	ldr	r3, [pc, #416]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d030      	beq.n	8001688 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d016      	beq.n	800165c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x514>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff faf4 	bl	8000c20 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff faf0 	bl	8000c20 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e157      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800164e:	4b58      	ldr	r3, [pc, #352]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x38c>
 800165a:	e015      	b.n	8001688 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_OscConfig+0x514>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fadd 	bl	8000c20 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fad9 	bl	8000c20 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e140      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800167e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80b5 	beq.w	8001800 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169a:	4b45      	ldr	r3, [pc, #276]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10d      	bne.n	80016c2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	4a41      	ldr	r2, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	6253      	str	r3, [r2, #36]	; 0x24
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <HAL_RCC_OscConfig+0x518>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_OscConfig+0x518>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a3d      	ldr	r2, [pc, #244]	; (80017c8 <HAL_RCC_OscConfig+0x518>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff faa1 	bl	8000c20 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff fa9d 	bl	8000c20 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e104      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x518>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x466>
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6353      	str	r3, [r2, #52]	; 0x34
 8001714:	e02d      	b.n	8001772 <HAL_RCC_OscConfig+0x4c2>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x488>
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001728:	6353      	str	r3, [r2, #52]	; 0x34
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001734:	6353      	str	r3, [r2, #52]	; 0x34
 8001736:	e01c      	b.n	8001772 <HAL_RCC_OscConfig+0x4c2>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d10c      	bne.n	800175a <HAL_RCC_OscConfig+0x4aa>
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001744:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174a:	6353      	str	r3, [r2, #52]	; 0x34
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	4a17      	ldr	r2, [pc, #92]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6353      	str	r3, [r2, #52]	; 0x34
 8001758:	e00b      	b.n	8001772 <HAL_RCC_OscConfig+0x4c2>
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001764:	6353      	str	r3, [r2, #52]	; 0x34
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800176c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001770:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d015      	beq.n	80017a6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fa51 	bl	8000c20 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fa4d 	bl	8000c20 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0b2      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_RCC_OscConfig+0x500>)
 800179a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ee      	beq.n	8001782 <HAL_RCC_OscConfig+0x4d2>
 80017a4:	e023      	b.n	80017ee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a6:	f7ff fa3b 	bl	8000c20 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ac:	e019      	b.n	80017e2 <HAL_RCC_OscConfig+0x532>
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08003438 	.word	0x08003438
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004
 80017c0:	42470020 	.word	0x42470020
 80017c4:	42470680 	.word	0x42470680
 80017c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff fa28 	bl	8000c20 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e08d      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e2:	4b49      	ldr	r3, [pc, #292]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1ee      	bne.n	80017cc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4b44      	ldr	r3, [pc, #272]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	4a43      	ldr	r2, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	2b00      	cmp	r3, #0
 8001806:	d079      	beq.n	80018fc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d056      	beq.n	80018bc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	2b02      	cmp	r3, #2
 8001814:	d13b      	bne.n	800188e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_OscConfig+0x65c>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fa00 	bl	8000c20 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f9fc 	bl	8000c20 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e063      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	4319      	orrs	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	430b      	orrs	r3, r1
 800185a:	492b      	ldr	r1, [pc, #172]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0x65c>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f9db 	bl	8000c20 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff f9d7 	bl	8000c20 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e03e      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x5be>
 800188c:	e036      	b.n	80018fc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_RCC_OscConfig+0x65c>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff f9c4 	bl	8000c20 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f9c0 	bl	8000c20 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e027      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x5ec>
 80018ba:	e01f      	b.n	80018fc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e01a      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_RCC_OscConfig+0x658>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	429a      	cmp	r2, r3
 80018da:	d10d      	bne.n	80018f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3720      	adds	r7, #32
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	42470060 	.word	0x42470060

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e11a      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b8f      	ldr	r3, [pc, #572]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d919      	bls.n	8001966 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_ClockConfig+0x34>
 8001938:	4b8a      	ldr	r3, [pc, #552]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a89      	ldr	r2, [pc, #548]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b87      	ldr	r3, [pc, #540]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 0201 	bic.w	r2, r3, #1
 800194c:	4985      	ldr	r1, [pc, #532]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001954:	4b83      	ldr	r3, [pc, #524]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0f9      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001972:	4b7d      	ldr	r3, [pc, #500]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	497a      	ldr	r1, [pc, #488]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 808e 	beq.w	8001aae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800199a:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d121      	bne.n	80019ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0d7      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019b2:	4b6d      	ldr	r3, [pc, #436]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d115      	bne.n	80019ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0cb      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ca:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0bf      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0b7      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	495c      	ldr	r1, [pc, #368]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019fc:	f7ff f910 	bl	8000c20 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d112      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff f908 	bl	8000c20 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e09b      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a22:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d1ee      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xfc>
 8001a2e:	e03e      	b.n	8001aae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f7ff f8f1 	bl	8000c20 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e084      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
 8001a5c:	e027      	b.n	8001aae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d11d      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff f8da 	bl	8000c20 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e06d      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d1ee      	bne.n	8001a68 <HAL_RCC_ClockConfig+0x158>
 8001a8a:	e010      	b.n	8001aae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff f8c8 	bl	8000c20 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e05b      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001aa2:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ee      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d219      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1be>
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a27      	ldr	r2, [pc, #156]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0201 	bic.w	r2, r3, #1
 8001ad6:	4923      	ldr	r1, [pc, #140]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_ClockConfig+0x254>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e034      	b.n	8001b5a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4917      	ldr	r1, [pc, #92]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490f      	ldr	r1, [pc, #60]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f823 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_ClockConfig+0x258>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490b      	ldr	r1, [pc, #44]	; (8001b6c <HAL_RCC_ClockConfig+0x25c>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <HAL_RCC_ClockConfig+0x260>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x264>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f81a 	bl	8000b88 <HAL_InitTick>
 8001b54:	4603      	mov	r3, r0
 8001b56:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b58:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08003438 	.word	0x08003438
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b7e:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d00d      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x32>
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	f200 80a4 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x164>
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d002      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x26>
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d003      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x2c>
 8001b9c:	e09e      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b9e:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x190>)
 8001ba0:	613b      	str	r3, [r7, #16]
      break;
 8001ba2:	e0a9      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ba4:	4b59      	ldr	r3, [pc, #356]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x194>)
 8001ba6:	613b      	str	r3, [r7, #16]
      break;
 8001ba8:	e0a6      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	0c9b      	lsrs	r3, r3, #18
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	4a57      	ldr	r2, [pc, #348]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x198>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	0d9b      	lsrs	r3, r3, #22
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d041      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	461c      	mov	r4, r3
 8001bd4:	f04f 0500 	mov.w	r5, #0
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	014b      	lsls	r3, r1, #5
 8001be6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bea:	0142      	lsls	r2, r0, #5
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	1b00      	subs	r0, r0, r4
 8001bf2:	eb61 0105 	sbc.w	r1, r1, r5
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	018b      	lsls	r3, r1, #6
 8001c00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c04:	0182      	lsls	r2, r0, #6
 8001c06:	1a12      	subs	r2, r2, r0
 8001c08:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0c:	f04f 0000 	mov.w	r0, #0
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	00d9      	lsls	r1, r3, #3
 8001c16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c1a:	00d0      	lsls	r0, r2, #3
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	1912      	adds	r2, r2, r4
 8001c22:	eb45 0303 	adc.w	r3, r5, r3
 8001c26:	f04f 0000 	mov.w	r0, #0
 8001c2a:	f04f 0100 	mov.w	r1, #0
 8001c2e:	0259      	lsls	r1, r3, #9
 8001c30:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c34:	0250      	lsls	r0, r2, #9
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	461a      	mov	r2, r3
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	f7fe fa99 	bl	800017c <__aeabi_uldivmod>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4613      	mov	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e040      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	461c      	mov	r4, r3
 8001c58:	f04f 0500 	mov.w	r5, #0
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	014b      	lsls	r3, r1, #5
 8001c6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c6e:	0142      	lsls	r2, r0, #5
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	1b00      	subs	r0, r0, r4
 8001c76:	eb61 0105 	sbc.w	r1, r1, r5
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	018b      	lsls	r3, r1, #6
 8001c84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c88:	0182      	lsls	r2, r0, #6
 8001c8a:	1a12      	subs	r2, r2, r0
 8001c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	00d9      	lsls	r1, r3, #3
 8001c9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c9e:	00d0      	lsls	r0, r2, #3
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	1912      	adds	r2, r2, r4
 8001ca6:	eb45 0303 	adc.w	r3, r5, r3
 8001caa:	f04f 0000 	mov.w	r0, #0
 8001cae:	f04f 0100 	mov.w	r1, #0
 8001cb2:	0299      	lsls	r1, r3, #10
 8001cb4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cb8:	0290      	lsls	r0, r2, #10
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	f7fe fa57 	bl	800017c <__aeabi_uldivmod>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	613b      	str	r3, [r7, #16]
      break;
 8001cda:	e00d      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	0b5b      	lsrs	r3, r3, #13
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	613b      	str	r3, [r7, #16]
      break;
 8001cf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf8:	693b      	ldr	r3, [r7, #16]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bdb0      	pop	{r4, r5, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	007a1200 	.word	0x007a1200
 8001d10:	0800342c 	.word	0x0800342c

08001d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d2c:	f7ff fff2 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4903      	ldr	r1, [pc, #12]	; (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	08003448 	.word	0x08003448

08001d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0adb      	lsrs	r3, r3, #11
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08003448 	.word	0x08003448

08001d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d84:	4b29      	ldr	r3, [pc, #164]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d12c      	bne.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d9c:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e016      	b.n	8001dd6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	4a1f      	ldr	r2, [pc, #124]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db2:	6253      	str	r3, [r2, #36]	; 0x24
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001dc8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001ddc:	d105      	bne.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001de4:	d101      	bne.n	8001dea <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001de6:	2301      	movs	r3, #1
 8001de8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0f      	ldr	r2, [pc, #60]	; (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f023 0201 	bic.w	r2, r3, #1
 8001e04:	490b      	ldr	r1, [pc, #44]	; (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000
 8001e34:	40023c00 	.word	0x40023c00

08001e38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e03f      	b.n	8001eca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fd68 	bl	8000934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2224      	movs	r2, #36	; 0x24
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fd27 	bl	80028d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ea0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b08a      	sub	sp, #40	; 0x28
 8001ed6:	af02      	add	r7, sp, #8
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d17c      	bne.n	8001fec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_UART_Transmit+0x2c>
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e075      	b.n	8001fee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_UART_Transmit+0x3e>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e06e      	b.n	8001fee <HAL_UART_Transmit+0x11c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2221      	movs	r2, #33	; 0x21
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f26:	f7fe fe7b 	bl	8000c20 <HAL_GetTick>
 8001f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f40:	d108      	bne.n	8001f54 <HAL_UART_Transmit+0x82>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d104      	bne.n	8001f54 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	e003      	b.n	8001f5c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f64:	e02a      	b.n	8001fbc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fada 	bl	800252a <UART_WaitOnFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e036      	b.n	8001fee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10b      	bne.n	8001f9e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	3302      	adds	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	e007      	b.n	8001fae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	781a      	ldrb	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	3301      	adds	r3, #1
 8001fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1cf      	bne.n	8001f66 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2140      	movs	r1, #64	; 0x40
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 faaa 	bl	800252a <UART_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e006      	b.n	8001fee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e000      	b.n	8001fee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
  }
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b08a      	sub	sp, #40	; 0x28
 8001ffa:	af02      	add	r7, sp, #8
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	4613      	mov	r3, r2
 8002004:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b20      	cmp	r3, #32
 8002014:	f040 808c 	bne.w	8002130 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_UART_Receive+0x2e>
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e084      	b.n	8002132 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_UART_Receive+0x40>
 8002032:	2302      	movs	r3, #2
 8002034:	e07d      	b.n	8002132 <HAL_UART_Receive+0x13c>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2222      	movs	r2, #34	; 0x22
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002052:	f7fe fde5 	bl	8000c20 <HAL_GetTick>
 8002056:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	88fa      	ldrh	r2, [r7, #6]
 800205c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800206c:	d108      	bne.n	8002080 <HAL_UART_Receive+0x8a>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	e003      	b.n	8002088 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002090:	e043      	b.n	800211a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2200      	movs	r2, #0
 800209a:	2120      	movs	r1, #32
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fa44 	bl	800252a <UART_WaitOnFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e042      	b.n	8002132 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10c      	bne.n	80020cc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020be:	b29a      	uxth	r2, r3
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	3302      	adds	r3, #2
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	e01f      	b.n	800210c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d4:	d007      	beq.n	80020e6 <HAL_UART_Receive+0xf0>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10a      	bne.n	80020f4 <HAL_UART_Receive+0xfe>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d106      	bne.n	80020f4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e008      	b.n	8002106 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002100:	b2da      	uxtb	r2, r3
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1b6      	bne.n	8002092 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3720      	adds	r7, #32
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	4613      	mov	r3, r2
 8002146:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b20      	cmp	r3, #32
 8002152:	d11d      	bne.n	8002190 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <HAL_UART_Receive_IT+0x26>
 800215a:	88fb      	ldrh	r3, [r7, #6]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e016      	b.n	8002192 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_UART_Receive_IT+0x38>
 800216e:	2302      	movs	r3, #2
 8002170:	e00f      	b.n	8002192 <HAL_UART_Receive_IT+0x58>
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	461a      	mov	r2, r3
 8002184:	68b9      	ldr	r1, [r7, #8]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa19 	bl	80025be <UART_Start_Receive_IT>
 800218c:	4603      	mov	r3, r0
 800218e:	e000      	b.n	8002192 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_UART_IRQHandler+0x52>
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fac9 	bl	800277e <UART_Receive_IT>
      return;
 80021ec:	e17b      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80b1 	beq.w	8002358 <HAL_UART_IRQHandler+0x1bc>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_UART_IRQHandler+0x70>
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80a6 	beq.w	8002358 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_UART_IRQHandler+0x90>
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_UART_IRQHandler+0xb0>
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_UART_IRQHandler+0xd0>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00f      	beq.n	8002296 <HAL_UART_IRQHandler+0xfa>
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_UART_IRQHandler+0xee>
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0208 	orr.w	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 811e 	beq.w	80024dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <HAL_UART_IRQHandler+0x11e>
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fa62 	bl	800277e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	bf0c      	ite	eq
 80022c8:	2301      	moveq	r3, #1
 80022ca:	2300      	movne	r3, #0
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <HAL_UART_IRQHandler+0x146>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d031      	beq.n	8002346 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f9a4 	bl	8002630 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d123      	bne.n	800233e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002304:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	2b00      	cmp	r3, #0
 800230c:	d013      	beq.n	8002336 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	4a76      	ldr	r2, [pc, #472]	; (80024ec <HAL_UART_IRQHandler+0x350>)
 8002314:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fdd4 	bl	8000ec8 <HAL_DMA_Abort_IT>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002330:	4610      	mov	r0, r2
 8002332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	e00e      	b.n	8002354 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8e3 	bl	8002502 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233c:	e00a      	b.n	8002354 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8df 	bl	8002502 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002344:	e006      	b.n	8002354 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8db 	bl	8002502 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002352:	e0c3      	b.n	80024dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002354:	bf00      	nop
    return;
 8002356:	e0c1      	b.n	80024dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 80a1 	bne.w	80024a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 809b 	beq.w	80024a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8095 	beq.w	80024a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239a:	2b40      	cmp	r3, #64	; 0x40
 800239c:	d14e      	bne.n	800243c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80023a8:	8a3b      	ldrh	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8098 	beq.w	80024e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023b4:	8a3a      	ldrh	r2, [r7, #16]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	f080 8092 	bcs.w	80024e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	8a3a      	ldrh	r2, [r7, #16]
 80023c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d02b      	beq.n	8002424 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023da:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695a      	ldr	r2, [r3, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023fa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0210 	bic.w	r2, r2, #16
 8002418:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fd15 	bl	8000e4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800242c:	b29b      	uxth	r3, r3
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f86d 	bl	8002514 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800243a:	e051      	b.n	80024e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002444:	b29b      	uxth	r3, r3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d047      	beq.n	80024e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002454:	8a7b      	ldrh	r3, [r7, #18]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d044      	beq.n	80024e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002468:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0201 	bic.w	r2, r2, #1
 8002478:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0210 	bic.w	r2, r2, #16
 8002496:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002498:	8a7b      	ldrh	r3, [r7, #18]
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f839 	bl	8002514 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80024a2:	e01f      	b.n	80024e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d008      	beq.n	80024c0 <HAL_UART_IRQHandler+0x324>
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8f9 	bl	80026b0 <UART_Transmit_IT>
    return;
 80024be:	e012      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <HAL_UART_IRQHandler+0x34a>
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f93a 	bl	800274e <UART_EndTransmit_IT>
    return;
 80024da:	e004      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80024dc:	bf00      	nop
 80024de:	e002      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80024e0:	bf00      	nop
 80024e2:	e000      	b.n	80024e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80024e4:	bf00      	nop
  }
}
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	08002689 	.word	0x08002689

080024f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253a:	e02c      	b.n	8002596 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d028      	beq.n	8002596 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <UART_WaitOnFlagUntilTimeout+0x30>
 800254a:	f7fe fb69 	bl	8000c20 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	429a      	cmp	r2, r3
 8002558:	d21d      	bcs.n	8002596 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002568:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0201 	bic.w	r2, r2, #1
 8002578:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e00f      	b.n	80025b6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d0c3      	beq.n	800253c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	88fa      	ldrh	r2, [r7, #6]
 80025dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2222      	movs	r2, #34	; 0x22
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002602:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0220 	orr.w	r2, r2, #32
 8002622:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002646:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0210 	bic.w	r2, r2, #16
 800266e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f7ff ff2d 	bl	8002502 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b21      	cmp	r3, #33	; 0x21
 80026c2:	d13e      	bne.n	8002742 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026cc:	d114      	bne.n	80026f8 <UART_Transmit_IT+0x48>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d110      	bne.n	80026f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	1c9a      	adds	r2, r3, #2
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	621a      	str	r2, [r3, #32]
 80026f6:	e008      	b.n	800270a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	1c59      	adds	r1, r3, #1
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6211      	str	r1, [r2, #32]
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4619      	mov	r1, r3
 8002718:	84d1      	strh	r1, [r2, #38]	; 0x26
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800272c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800273c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	e000      	b.n	8002744 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002742:	2302      	movs	r3, #2
  }
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff febe 	bl	80024f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b22      	cmp	r3, #34	; 0x22
 8002790:	f040 8099 	bne.w	80028c6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279c:	d117      	bne.n	80027ce <UART_Receive_IT+0x50>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d113      	bne.n	80027ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027bc:	b29a      	uxth	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	1c9a      	adds	r2, r3, #2
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
 80027cc:	e026      	b.n	800281c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e0:	d007      	beq.n	80027f2 <UART_Receive_IT+0x74>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <UART_Receive_IT+0x82>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e008      	b.n	8002812 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800280c:	b2da      	uxtb	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29b      	uxth	r3, r3
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4619      	mov	r1, r3
 800282a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800282c:	2b00      	cmp	r3, #0
 800282e:	d148      	bne.n	80028c2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0220 	bic.w	r2, r2, #32
 800283e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800284e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	2b01      	cmp	r3, #1
 800286e:	d123      	bne.n	80028b8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0210 	bic.w	r2, r2, #16
 8002884:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b10      	cmp	r3, #16
 8002892:	d10a      	bne.n	80028aa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002894:	2300      	movs	r3, #0
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fe2f 	bl	8002514 <HAL_UARTEx_RxEventCallback>
 80028b6:	e002      	b.n	80028be <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7fd fedf 	bl	800067c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e002      	b.n	80028c8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	431a      	orrs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4313      	orrs	r3, r2
 8002904:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002910:	f023 030c 	bic.w	r3, r3, #12
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	430b      	orrs	r3, r1
 800291c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a55      	ldr	r2, [pc, #340]	; (8002a90 <UART_SetConfig+0x1c0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d103      	bne.n	8002946 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800293e:	f7ff fa07 	bl	8001d50 <HAL_RCC_GetPCLK2Freq>
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	e002      	b.n	800294c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002946:	f7ff f9ef 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 800294a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002954:	d14c      	bne.n	80029f0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fbb2 f3f3 	udiv	r3, r2, r3
 800296c:	4a49      	ldr	r2, [pc, #292]	; (8002a94 <UART_SetConfig+0x1c4>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	0119      	lsls	r1, r3, #4
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	441a      	add	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fbb2 f2f3 	udiv	r2, r2, r3
 800298c:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <UART_SetConfig+0x1c4>)
 800298e:	fba3 0302 	umull	r0, r3, r3, r2
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	2064      	movs	r0, #100	; 0x64
 8002996:	fb00 f303 	mul.w	r3, r0, r3
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	3332      	adds	r3, #50	; 0x32
 80029a0:	4a3c      	ldr	r2, [pc, #240]	; (8002a94 <UART_SetConfig+0x1c4>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029ae:	4419      	add	r1, r3
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	009a      	lsls	r2, r3, #2
 80029ba:	441a      	add	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c6:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <UART_SetConfig+0x1c4>)
 80029c8:	fba3 0302 	umull	r0, r3, r3, r2
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	2064      	movs	r0, #100	; 0x64
 80029d0:	fb00 f303 	mul.w	r3, r0, r3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	3332      	adds	r3, #50	; 0x32
 80029da:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <UART_SetConfig+0x1c4>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	095b      	lsrs	r3, r3, #5
 80029e2:	f003 0207 	and.w	r2, r3, #7
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	440a      	add	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029ee:	e04a      	b.n	8002a86 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	009a      	lsls	r2, r3, #2
 80029fa:	441a      	add	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <UART_SetConfig+0x1c4>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	0119      	lsls	r1, r3, #4
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009a      	lsls	r2, r3, #2
 8002a1a:	441a      	add	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <UART_SetConfig+0x1c4>)
 8002a28:	fba3 0302 	umull	r0, r3, r3, r2
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	2064      	movs	r0, #100	; 0x64
 8002a30:	fb00 f303 	mul.w	r3, r0, r3
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	3332      	adds	r3, #50	; 0x32
 8002a3a:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <UART_SetConfig+0x1c4>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a46:	4419      	add	r1, r3
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009a      	lsls	r2, r3, #2
 8002a52:	441a      	add	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <UART_SetConfig+0x1c4>)
 8002a60:	fba3 0302 	umull	r0, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	2064      	movs	r0, #100	; 0x64
 8002a68:	fb00 f303 	mul.w	r3, r0, r3
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	3332      	adds	r3, #50	; 0x32
 8002a72:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <UART_SetConfig+0x1c4>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	440a      	add	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40013800 	.word	0x40013800
 8002a94:	51eb851f 	.word	0x51eb851f

08002a98 <__errno>:
 8002a98:	4b01      	ldr	r3, [pc, #4]	; (8002aa0 <__errno+0x8>)
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000000c 	.word	0x2000000c

08002aa4 <__libc_init_array>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	4d0c      	ldr	r5, [pc, #48]	; (8002adc <__libc_init_array+0x38>)
 8002aaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ae0 <__libc_init_array+0x3c>)
 8002aac:	1b64      	subs	r4, r4, r5
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	42a6      	cmp	r6, r4
 8002ab2:	d109      	bne.n	8002ac8 <__libc_init_array+0x24>
 8002ab4:	f000 fc5c 	bl	8003370 <_init>
 8002ab8:	2600      	movs	r6, #0
 8002aba:	4d0a      	ldr	r5, [pc, #40]	; (8002ae4 <__libc_init_array+0x40>)
 8002abc:	4c0a      	ldr	r4, [pc, #40]	; (8002ae8 <__libc_init_array+0x44>)
 8002abe:	1b64      	subs	r4, r4, r5
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	42a6      	cmp	r6, r4
 8002ac4:	d105      	bne.n	8002ad2 <__libc_init_array+0x2e>
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002acc:	4798      	blx	r3
 8002ace:	3601      	adds	r6, #1
 8002ad0:	e7ee      	b.n	8002ab0 <__libc_init_array+0xc>
 8002ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad6:	4798      	blx	r3
 8002ad8:	3601      	adds	r6, #1
 8002ada:	e7f2      	b.n	8002ac2 <__libc_init_array+0x1e>
 8002adc:	0800348c 	.word	0x0800348c
 8002ae0:	0800348c 	.word	0x0800348c
 8002ae4:	0800348c 	.word	0x0800348c
 8002ae8:	08003490 	.word	0x08003490

08002aec <memset>:
 8002aec:	4603      	mov	r3, r0
 8002aee:	4402      	add	r2, r0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d100      	bne.n	8002af6 <memset+0xa>
 8002af4:	4770      	bx	lr
 8002af6:	f803 1b01 	strb.w	r1, [r3], #1
 8002afa:	e7f9      	b.n	8002af0 <memset+0x4>

08002afc <siprintf>:
 8002afc:	b40e      	push	{r1, r2, r3}
 8002afe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b02:	b500      	push	{lr}
 8002b04:	b09c      	sub	sp, #112	; 0x70
 8002b06:	ab1d      	add	r3, sp, #116	; 0x74
 8002b08:	9002      	str	r0, [sp, #8]
 8002b0a:	9006      	str	r0, [sp, #24]
 8002b0c:	9107      	str	r1, [sp, #28]
 8002b0e:	9104      	str	r1, [sp, #16]
 8002b10:	4808      	ldr	r0, [pc, #32]	; (8002b34 <siprintf+0x38>)
 8002b12:	4909      	ldr	r1, [pc, #36]	; (8002b38 <siprintf+0x3c>)
 8002b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b18:	9105      	str	r1, [sp, #20]
 8002b1a:	6800      	ldr	r0, [r0, #0]
 8002b1c:	a902      	add	r1, sp, #8
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	f000 f868 	bl	8002bf4 <_svfiprintf_r>
 8002b24:	2200      	movs	r2, #0
 8002b26:	9b02      	ldr	r3, [sp, #8]
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	b01c      	add	sp, #112	; 0x70
 8002b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b30:	b003      	add	sp, #12
 8002b32:	4770      	bx	lr
 8002b34:	2000000c 	.word	0x2000000c
 8002b38:	ffff0208 	.word	0xffff0208

08002b3c <__ssputs_r>:
 8002b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b40:	688e      	ldr	r6, [r1, #8]
 8002b42:	4682      	mov	sl, r0
 8002b44:	429e      	cmp	r6, r3
 8002b46:	460c      	mov	r4, r1
 8002b48:	4690      	mov	r8, r2
 8002b4a:	461f      	mov	r7, r3
 8002b4c:	d838      	bhi.n	8002bc0 <__ssputs_r+0x84>
 8002b4e:	898a      	ldrh	r2, [r1, #12]
 8002b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b54:	d032      	beq.n	8002bbc <__ssputs_r+0x80>
 8002b56:	6825      	ldr	r5, [r4, #0]
 8002b58:	6909      	ldr	r1, [r1, #16]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	eba5 0901 	sub.w	r9, r5, r1
 8002b60:	6965      	ldr	r5, [r4, #20]
 8002b62:	444b      	add	r3, r9
 8002b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b6c:	106d      	asrs	r5, r5, #1
 8002b6e:	429d      	cmp	r5, r3
 8002b70:	bf38      	it	cc
 8002b72:	461d      	movcc	r5, r3
 8002b74:	0553      	lsls	r3, r2, #21
 8002b76:	d531      	bpl.n	8002bdc <__ssputs_r+0xa0>
 8002b78:	4629      	mov	r1, r5
 8002b7a:	f000 fb53 	bl	8003224 <_malloc_r>
 8002b7e:	4606      	mov	r6, r0
 8002b80:	b950      	cbnz	r0, 8002b98 <__ssputs_r+0x5c>
 8002b82:	230c      	movs	r3, #12
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	f8ca 3000 	str.w	r3, [sl]
 8002b8c:	89a3      	ldrh	r3, [r4, #12]
 8002b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b92:	81a3      	strh	r3, [r4, #12]
 8002b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b98:	464a      	mov	r2, r9
 8002b9a:	6921      	ldr	r1, [r4, #16]
 8002b9c:	f000 face 	bl	800313c <memcpy>
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002baa:	81a3      	strh	r3, [r4, #12]
 8002bac:	6126      	str	r6, [r4, #16]
 8002bae:	444e      	add	r6, r9
 8002bb0:	6026      	str	r6, [r4, #0]
 8002bb2:	463e      	mov	r6, r7
 8002bb4:	6165      	str	r5, [r4, #20]
 8002bb6:	eba5 0509 	sub.w	r5, r5, r9
 8002bba:	60a5      	str	r5, [r4, #8]
 8002bbc:	42be      	cmp	r6, r7
 8002bbe:	d900      	bls.n	8002bc2 <__ssputs_r+0x86>
 8002bc0:	463e      	mov	r6, r7
 8002bc2:	4632      	mov	r2, r6
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	6820      	ldr	r0, [r4, #0]
 8002bc8:	f000 fac6 	bl	8003158 <memmove>
 8002bcc:	68a3      	ldr	r3, [r4, #8]
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	1b9b      	subs	r3, r3, r6
 8002bd2:	4432      	add	r2, r6
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	60a3      	str	r3, [r4, #8]
 8002bd8:	6022      	str	r2, [r4, #0]
 8002bda:	e7db      	b.n	8002b94 <__ssputs_r+0x58>
 8002bdc:	462a      	mov	r2, r5
 8002bde:	f000 fb7b 	bl	80032d8 <_realloc_r>
 8002be2:	4606      	mov	r6, r0
 8002be4:	2800      	cmp	r0, #0
 8002be6:	d1e1      	bne.n	8002bac <__ssputs_r+0x70>
 8002be8:	4650      	mov	r0, sl
 8002bea:	6921      	ldr	r1, [r4, #16]
 8002bec:	f000 face 	bl	800318c <_free_r>
 8002bf0:	e7c7      	b.n	8002b82 <__ssputs_r+0x46>
	...

08002bf4 <_svfiprintf_r>:
 8002bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf8:	4698      	mov	r8, r3
 8002bfa:	898b      	ldrh	r3, [r1, #12]
 8002bfc:	4607      	mov	r7, r0
 8002bfe:	061b      	lsls	r3, r3, #24
 8002c00:	460d      	mov	r5, r1
 8002c02:	4614      	mov	r4, r2
 8002c04:	b09d      	sub	sp, #116	; 0x74
 8002c06:	d50e      	bpl.n	8002c26 <_svfiprintf_r+0x32>
 8002c08:	690b      	ldr	r3, [r1, #16]
 8002c0a:	b963      	cbnz	r3, 8002c26 <_svfiprintf_r+0x32>
 8002c0c:	2140      	movs	r1, #64	; 0x40
 8002c0e:	f000 fb09 	bl	8003224 <_malloc_r>
 8002c12:	6028      	str	r0, [r5, #0]
 8002c14:	6128      	str	r0, [r5, #16]
 8002c16:	b920      	cbnz	r0, 8002c22 <_svfiprintf_r+0x2e>
 8002c18:	230c      	movs	r3, #12
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	e0d1      	b.n	8002dc6 <_svfiprintf_r+0x1d2>
 8002c22:	2340      	movs	r3, #64	; 0x40
 8002c24:	616b      	str	r3, [r5, #20]
 8002c26:	2300      	movs	r3, #0
 8002c28:	9309      	str	r3, [sp, #36]	; 0x24
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c30:	2330      	movs	r3, #48	; 0x30
 8002c32:	f04f 0901 	mov.w	r9, #1
 8002c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002de0 <_svfiprintf_r+0x1ec>
 8002c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c42:	4623      	mov	r3, r4
 8002c44:	469a      	mov	sl, r3
 8002c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c4a:	b10a      	cbz	r2, 8002c50 <_svfiprintf_r+0x5c>
 8002c4c:	2a25      	cmp	r2, #37	; 0x25
 8002c4e:	d1f9      	bne.n	8002c44 <_svfiprintf_r+0x50>
 8002c50:	ebba 0b04 	subs.w	fp, sl, r4
 8002c54:	d00b      	beq.n	8002c6e <_svfiprintf_r+0x7a>
 8002c56:	465b      	mov	r3, fp
 8002c58:	4622      	mov	r2, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	4638      	mov	r0, r7
 8002c5e:	f7ff ff6d 	bl	8002b3c <__ssputs_r>
 8002c62:	3001      	adds	r0, #1
 8002c64:	f000 80aa 	beq.w	8002dbc <_svfiprintf_r+0x1c8>
 8002c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c6a:	445a      	add	r2, fp
 8002c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8002c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 80a2 	beq.w	8002dbc <_svfiprintf_r+0x1c8>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c82:	f10a 0a01 	add.w	sl, sl, #1
 8002c86:	9304      	str	r3, [sp, #16]
 8002c88:	9307      	str	r3, [sp, #28]
 8002c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8002c90:	4654      	mov	r4, sl
 8002c92:	2205      	movs	r2, #5
 8002c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c98:	4851      	ldr	r0, [pc, #324]	; (8002de0 <_svfiprintf_r+0x1ec>)
 8002c9a:	f000 fa41 	bl	8003120 <memchr>
 8002c9e:	9a04      	ldr	r2, [sp, #16]
 8002ca0:	b9d8      	cbnz	r0, 8002cda <_svfiprintf_r+0xe6>
 8002ca2:	06d0      	lsls	r0, r2, #27
 8002ca4:	bf44      	itt	mi
 8002ca6:	2320      	movmi	r3, #32
 8002ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cac:	0711      	lsls	r1, r2, #28
 8002cae:	bf44      	itt	mi
 8002cb0:	232b      	movmi	r3, #43	; 0x2b
 8002cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cba:	2b2a      	cmp	r3, #42	; 0x2a
 8002cbc:	d015      	beq.n	8002cea <_svfiprintf_r+0xf6>
 8002cbe:	4654      	mov	r4, sl
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f04f 0c0a 	mov.w	ip, #10
 8002cc6:	9a07      	ldr	r2, [sp, #28]
 8002cc8:	4621      	mov	r1, r4
 8002cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cce:	3b30      	subs	r3, #48	; 0x30
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	d94e      	bls.n	8002d72 <_svfiprintf_r+0x17e>
 8002cd4:	b1b0      	cbz	r0, 8002d04 <_svfiprintf_r+0x110>
 8002cd6:	9207      	str	r2, [sp, #28]
 8002cd8:	e014      	b.n	8002d04 <_svfiprintf_r+0x110>
 8002cda:	eba0 0308 	sub.w	r3, r0, r8
 8002cde:	fa09 f303 	lsl.w	r3, r9, r3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	46a2      	mov	sl, r4
 8002ce6:	9304      	str	r3, [sp, #16]
 8002ce8:	e7d2      	b.n	8002c90 <_svfiprintf_r+0x9c>
 8002cea:	9b03      	ldr	r3, [sp, #12]
 8002cec:	1d19      	adds	r1, r3, #4
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	9103      	str	r1, [sp, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bfbb      	ittet	lt
 8002cf6:	425b      	neglt	r3, r3
 8002cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8002cfc:	9307      	strge	r3, [sp, #28]
 8002cfe:	9307      	strlt	r3, [sp, #28]
 8002d00:	bfb8      	it	lt
 8002d02:	9204      	strlt	r2, [sp, #16]
 8002d04:	7823      	ldrb	r3, [r4, #0]
 8002d06:	2b2e      	cmp	r3, #46	; 0x2e
 8002d08:	d10c      	bne.n	8002d24 <_svfiprintf_r+0x130>
 8002d0a:	7863      	ldrb	r3, [r4, #1]
 8002d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d0e:	d135      	bne.n	8002d7c <_svfiprintf_r+0x188>
 8002d10:	9b03      	ldr	r3, [sp, #12]
 8002d12:	3402      	adds	r4, #2
 8002d14:	1d1a      	adds	r2, r3, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	9203      	str	r2, [sp, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	bfb8      	it	lt
 8002d1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d22:	9305      	str	r3, [sp, #20]
 8002d24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002df0 <_svfiprintf_r+0x1fc>
 8002d28:	2203      	movs	r2, #3
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	7821      	ldrb	r1, [r4, #0]
 8002d2e:	f000 f9f7 	bl	8003120 <memchr>
 8002d32:	b140      	cbz	r0, 8002d46 <_svfiprintf_r+0x152>
 8002d34:	2340      	movs	r3, #64	; 0x40
 8002d36:	eba0 000a 	sub.w	r0, r0, sl
 8002d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d3e:	9b04      	ldr	r3, [sp, #16]
 8002d40:	3401      	adds	r4, #1
 8002d42:	4303      	orrs	r3, r0
 8002d44:	9304      	str	r3, [sp, #16]
 8002d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d4a:	2206      	movs	r2, #6
 8002d4c:	4825      	ldr	r0, [pc, #148]	; (8002de4 <_svfiprintf_r+0x1f0>)
 8002d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d52:	f000 f9e5 	bl	8003120 <memchr>
 8002d56:	2800      	cmp	r0, #0
 8002d58:	d038      	beq.n	8002dcc <_svfiprintf_r+0x1d8>
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <_svfiprintf_r+0x1f4>)
 8002d5c:	bb1b      	cbnz	r3, 8002da6 <_svfiprintf_r+0x1b2>
 8002d5e:	9b03      	ldr	r3, [sp, #12]
 8002d60:	3307      	adds	r3, #7
 8002d62:	f023 0307 	bic.w	r3, r3, #7
 8002d66:	3308      	adds	r3, #8
 8002d68:	9303      	str	r3, [sp, #12]
 8002d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d6c:	4433      	add	r3, r6
 8002d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d70:	e767      	b.n	8002c42 <_svfiprintf_r+0x4e>
 8002d72:	460c      	mov	r4, r1
 8002d74:	2001      	movs	r0, #1
 8002d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d7a:	e7a5      	b.n	8002cc8 <_svfiprintf_r+0xd4>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f04f 0c0a 	mov.w	ip, #10
 8002d82:	4619      	mov	r1, r3
 8002d84:	3401      	adds	r4, #1
 8002d86:	9305      	str	r3, [sp, #20]
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d8e:	3a30      	subs	r2, #48	; 0x30
 8002d90:	2a09      	cmp	r2, #9
 8002d92:	d903      	bls.n	8002d9c <_svfiprintf_r+0x1a8>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0c5      	beq.n	8002d24 <_svfiprintf_r+0x130>
 8002d98:	9105      	str	r1, [sp, #20]
 8002d9a:	e7c3      	b.n	8002d24 <_svfiprintf_r+0x130>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	2301      	movs	r3, #1
 8002da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002da4:	e7f0      	b.n	8002d88 <_svfiprintf_r+0x194>
 8002da6:	ab03      	add	r3, sp, #12
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	462a      	mov	r2, r5
 8002dac:	4638      	mov	r0, r7
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <_svfiprintf_r+0x1f8>)
 8002db0:	a904      	add	r1, sp, #16
 8002db2:	f3af 8000 	nop.w
 8002db6:	1c42      	adds	r2, r0, #1
 8002db8:	4606      	mov	r6, r0
 8002dba:	d1d6      	bne.n	8002d6a <_svfiprintf_r+0x176>
 8002dbc:	89ab      	ldrh	r3, [r5, #12]
 8002dbe:	065b      	lsls	r3, r3, #25
 8002dc0:	f53f af2c 	bmi.w	8002c1c <_svfiprintf_r+0x28>
 8002dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dc6:	b01d      	add	sp, #116	; 0x74
 8002dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dcc:	ab03      	add	r3, sp, #12
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	462a      	mov	r2, r5
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <_svfiprintf_r+0x1f8>)
 8002dd6:	a904      	add	r1, sp, #16
 8002dd8:	f000 f87c 	bl	8002ed4 <_printf_i>
 8002ddc:	e7eb      	b.n	8002db6 <_svfiprintf_r+0x1c2>
 8002dde:	bf00      	nop
 8002de0:	08003450 	.word	0x08003450
 8002de4:	0800345a 	.word	0x0800345a
 8002de8:	00000000 	.word	0x00000000
 8002dec:	08002b3d 	.word	0x08002b3d
 8002df0:	08003456 	.word	0x08003456

08002df4 <_printf_common>:
 8002df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df8:	4616      	mov	r6, r2
 8002dfa:	4699      	mov	r9, r3
 8002dfc:	688a      	ldr	r2, [r1, #8]
 8002dfe:	690b      	ldr	r3, [r1, #16]
 8002e00:	4607      	mov	r7, r0
 8002e02:	4293      	cmp	r3, r2
 8002e04:	bfb8      	it	lt
 8002e06:	4613      	movlt	r3, r2
 8002e08:	6033      	str	r3, [r6, #0]
 8002e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e0e:	460c      	mov	r4, r1
 8002e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e14:	b10a      	cbz	r2, 8002e1a <_printf_common+0x26>
 8002e16:	3301      	adds	r3, #1
 8002e18:	6033      	str	r3, [r6, #0]
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	0699      	lsls	r1, r3, #26
 8002e1e:	bf42      	ittt	mi
 8002e20:	6833      	ldrmi	r3, [r6, #0]
 8002e22:	3302      	addmi	r3, #2
 8002e24:	6033      	strmi	r3, [r6, #0]
 8002e26:	6825      	ldr	r5, [r4, #0]
 8002e28:	f015 0506 	ands.w	r5, r5, #6
 8002e2c:	d106      	bne.n	8002e3c <_printf_common+0x48>
 8002e2e:	f104 0a19 	add.w	sl, r4, #25
 8002e32:	68e3      	ldr	r3, [r4, #12]
 8002e34:	6832      	ldr	r2, [r6, #0]
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	42ab      	cmp	r3, r5
 8002e3a:	dc28      	bgt.n	8002e8e <_printf_common+0x9a>
 8002e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e40:	1e13      	subs	r3, r2, #0
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	bf18      	it	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	0692      	lsls	r2, r2, #26
 8002e4a:	d42d      	bmi.n	8002ea8 <_printf_common+0xb4>
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	4638      	mov	r0, r7
 8002e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e54:	47c0      	blx	r8
 8002e56:	3001      	adds	r0, #1
 8002e58:	d020      	beq.n	8002e9c <_printf_common+0xa8>
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	68e5      	ldr	r5, [r4, #12]
 8002e5e:	f003 0306 	and.w	r3, r3, #6
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	bf18      	it	ne
 8002e66:	2500      	movne	r5, #0
 8002e68:	6832      	ldr	r2, [r6, #0]
 8002e6a:	f04f 0600 	mov.w	r6, #0
 8002e6e:	68a3      	ldr	r3, [r4, #8]
 8002e70:	bf08      	it	eq
 8002e72:	1aad      	subeq	r5, r5, r2
 8002e74:	6922      	ldr	r2, [r4, #16]
 8002e76:	bf08      	it	eq
 8002e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bfc4      	itt	gt
 8002e80:	1a9b      	subgt	r3, r3, r2
 8002e82:	18ed      	addgt	r5, r5, r3
 8002e84:	341a      	adds	r4, #26
 8002e86:	42b5      	cmp	r5, r6
 8002e88:	d11a      	bne.n	8002ec0 <_printf_common+0xcc>
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	e008      	b.n	8002ea0 <_printf_common+0xac>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	4652      	mov	r2, sl
 8002e92:	4649      	mov	r1, r9
 8002e94:	4638      	mov	r0, r7
 8002e96:	47c0      	blx	r8
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d103      	bne.n	8002ea4 <_printf_common+0xb0>
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ea4:	3501      	adds	r5, #1
 8002ea6:	e7c4      	b.n	8002e32 <_printf_common+0x3e>
 8002ea8:	2030      	movs	r0, #48	; 0x30
 8002eaa:	18e1      	adds	r1, r4, r3
 8002eac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eb6:	4422      	add	r2, r4
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ebe:	e7c5      	b.n	8002e4c <_printf_common+0x58>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	4638      	mov	r0, r7
 8002ec8:	47c0      	blx	r8
 8002eca:	3001      	adds	r0, #1
 8002ecc:	d0e6      	beq.n	8002e9c <_printf_common+0xa8>
 8002ece:	3601      	adds	r6, #1
 8002ed0:	e7d9      	b.n	8002e86 <_printf_common+0x92>
	...

08002ed4 <_printf_i>:
 8002ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed8:	460c      	mov	r4, r1
 8002eda:	7e27      	ldrb	r7, [r4, #24]
 8002edc:	4691      	mov	r9, r2
 8002ede:	2f78      	cmp	r7, #120	; 0x78
 8002ee0:	4680      	mov	r8, r0
 8002ee2:	469a      	mov	sl, r3
 8002ee4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eea:	d807      	bhi.n	8002efc <_printf_i+0x28>
 8002eec:	2f62      	cmp	r7, #98	; 0x62
 8002eee:	d80a      	bhi.n	8002f06 <_printf_i+0x32>
 8002ef0:	2f00      	cmp	r7, #0
 8002ef2:	f000 80d9 	beq.w	80030a8 <_printf_i+0x1d4>
 8002ef6:	2f58      	cmp	r7, #88	; 0x58
 8002ef8:	f000 80a4 	beq.w	8003044 <_printf_i+0x170>
 8002efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f04:	e03a      	b.n	8002f7c <_printf_i+0xa8>
 8002f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f0a:	2b15      	cmp	r3, #21
 8002f0c:	d8f6      	bhi.n	8002efc <_printf_i+0x28>
 8002f0e:	a001      	add	r0, pc, #4	; (adr r0, 8002f14 <_printf_i+0x40>)
 8002f10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f14:	08002f6d 	.word	0x08002f6d
 8002f18:	08002f81 	.word	0x08002f81
 8002f1c:	08002efd 	.word	0x08002efd
 8002f20:	08002efd 	.word	0x08002efd
 8002f24:	08002efd 	.word	0x08002efd
 8002f28:	08002efd 	.word	0x08002efd
 8002f2c:	08002f81 	.word	0x08002f81
 8002f30:	08002efd 	.word	0x08002efd
 8002f34:	08002efd 	.word	0x08002efd
 8002f38:	08002efd 	.word	0x08002efd
 8002f3c:	08002efd 	.word	0x08002efd
 8002f40:	0800308f 	.word	0x0800308f
 8002f44:	08002fb1 	.word	0x08002fb1
 8002f48:	08003071 	.word	0x08003071
 8002f4c:	08002efd 	.word	0x08002efd
 8002f50:	08002efd 	.word	0x08002efd
 8002f54:	080030b1 	.word	0x080030b1
 8002f58:	08002efd 	.word	0x08002efd
 8002f5c:	08002fb1 	.word	0x08002fb1
 8002f60:	08002efd 	.word	0x08002efd
 8002f64:	08002efd 	.word	0x08002efd
 8002f68:	08003079 	.word	0x08003079
 8002f6c:	680b      	ldr	r3, [r1, #0]
 8002f6e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f72:	1d1a      	adds	r2, r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	600a      	str	r2, [r1, #0]
 8002f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0a4      	b.n	80030ca <_printf_i+0x1f6>
 8002f80:	6825      	ldr	r5, [r4, #0]
 8002f82:	6808      	ldr	r0, [r1, #0]
 8002f84:	062e      	lsls	r6, r5, #24
 8002f86:	f100 0304 	add.w	r3, r0, #4
 8002f8a:	d50a      	bpl.n	8002fa2 <_printf_i+0xce>
 8002f8c:	6805      	ldr	r5, [r0, #0]
 8002f8e:	600b      	str	r3, [r1, #0]
 8002f90:	2d00      	cmp	r5, #0
 8002f92:	da03      	bge.n	8002f9c <_printf_i+0xc8>
 8002f94:	232d      	movs	r3, #45	; 0x2d
 8002f96:	426d      	negs	r5, r5
 8002f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	485e      	ldr	r0, [pc, #376]	; (8003118 <_printf_i+0x244>)
 8002fa0:	e019      	b.n	8002fd6 <_printf_i+0x102>
 8002fa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fa6:	6805      	ldr	r5, [r0, #0]
 8002fa8:	600b      	str	r3, [r1, #0]
 8002faa:	bf18      	it	ne
 8002fac:	b22d      	sxthne	r5, r5
 8002fae:	e7ef      	b.n	8002f90 <_printf_i+0xbc>
 8002fb0:	680b      	ldr	r3, [r1, #0]
 8002fb2:	6825      	ldr	r5, [r4, #0]
 8002fb4:	1d18      	adds	r0, r3, #4
 8002fb6:	6008      	str	r0, [r1, #0]
 8002fb8:	0628      	lsls	r0, r5, #24
 8002fba:	d501      	bpl.n	8002fc0 <_printf_i+0xec>
 8002fbc:	681d      	ldr	r5, [r3, #0]
 8002fbe:	e002      	b.n	8002fc6 <_printf_i+0xf2>
 8002fc0:	0669      	lsls	r1, r5, #25
 8002fc2:	d5fb      	bpl.n	8002fbc <_printf_i+0xe8>
 8002fc4:	881d      	ldrh	r5, [r3, #0]
 8002fc6:	2f6f      	cmp	r7, #111	; 0x6f
 8002fc8:	bf0c      	ite	eq
 8002fca:	2308      	moveq	r3, #8
 8002fcc:	230a      	movne	r3, #10
 8002fce:	4852      	ldr	r0, [pc, #328]	; (8003118 <_printf_i+0x244>)
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fd6:	6866      	ldr	r6, [r4, #4]
 8002fd8:	2e00      	cmp	r6, #0
 8002fda:	bfa8      	it	ge
 8002fdc:	6821      	ldrge	r1, [r4, #0]
 8002fde:	60a6      	str	r6, [r4, #8]
 8002fe0:	bfa4      	itt	ge
 8002fe2:	f021 0104 	bicge.w	r1, r1, #4
 8002fe6:	6021      	strge	r1, [r4, #0]
 8002fe8:	b90d      	cbnz	r5, 8002fee <_printf_i+0x11a>
 8002fea:	2e00      	cmp	r6, #0
 8002fec:	d04d      	beq.n	800308a <_printf_i+0x1b6>
 8002fee:	4616      	mov	r6, r2
 8002ff0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ff4:	fb03 5711 	mls	r7, r3, r1, r5
 8002ff8:	5dc7      	ldrb	r7, [r0, r7]
 8002ffa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ffe:	462f      	mov	r7, r5
 8003000:	42bb      	cmp	r3, r7
 8003002:	460d      	mov	r5, r1
 8003004:	d9f4      	bls.n	8002ff0 <_printf_i+0x11c>
 8003006:	2b08      	cmp	r3, #8
 8003008:	d10b      	bne.n	8003022 <_printf_i+0x14e>
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	07df      	lsls	r7, r3, #31
 800300e:	d508      	bpl.n	8003022 <_printf_i+0x14e>
 8003010:	6923      	ldr	r3, [r4, #16]
 8003012:	6861      	ldr	r1, [r4, #4]
 8003014:	4299      	cmp	r1, r3
 8003016:	bfde      	ittt	le
 8003018:	2330      	movle	r3, #48	; 0x30
 800301a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800301e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003022:	1b92      	subs	r2, r2, r6
 8003024:	6122      	str	r2, [r4, #16]
 8003026:	464b      	mov	r3, r9
 8003028:	4621      	mov	r1, r4
 800302a:	4640      	mov	r0, r8
 800302c:	f8cd a000 	str.w	sl, [sp]
 8003030:	aa03      	add	r2, sp, #12
 8003032:	f7ff fedf 	bl	8002df4 <_printf_common>
 8003036:	3001      	adds	r0, #1
 8003038:	d14c      	bne.n	80030d4 <_printf_i+0x200>
 800303a:	f04f 30ff 	mov.w	r0, #4294967295
 800303e:	b004      	add	sp, #16
 8003040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003044:	4834      	ldr	r0, [pc, #208]	; (8003118 <_printf_i+0x244>)
 8003046:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800304a:	680e      	ldr	r6, [r1, #0]
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003052:	061f      	lsls	r7, r3, #24
 8003054:	600e      	str	r6, [r1, #0]
 8003056:	d514      	bpl.n	8003082 <_printf_i+0x1ae>
 8003058:	07d9      	lsls	r1, r3, #31
 800305a:	bf44      	itt	mi
 800305c:	f043 0320 	orrmi.w	r3, r3, #32
 8003060:	6023      	strmi	r3, [r4, #0]
 8003062:	b91d      	cbnz	r5, 800306c <_printf_i+0x198>
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	f023 0320 	bic.w	r3, r3, #32
 800306a:	6023      	str	r3, [r4, #0]
 800306c:	2310      	movs	r3, #16
 800306e:	e7af      	b.n	8002fd0 <_printf_i+0xfc>
 8003070:	6823      	ldr	r3, [r4, #0]
 8003072:	f043 0320 	orr.w	r3, r3, #32
 8003076:	6023      	str	r3, [r4, #0]
 8003078:	2378      	movs	r3, #120	; 0x78
 800307a:	4828      	ldr	r0, [pc, #160]	; (800311c <_printf_i+0x248>)
 800307c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003080:	e7e3      	b.n	800304a <_printf_i+0x176>
 8003082:	065e      	lsls	r6, r3, #25
 8003084:	bf48      	it	mi
 8003086:	b2ad      	uxthmi	r5, r5
 8003088:	e7e6      	b.n	8003058 <_printf_i+0x184>
 800308a:	4616      	mov	r6, r2
 800308c:	e7bb      	b.n	8003006 <_printf_i+0x132>
 800308e:	680b      	ldr	r3, [r1, #0]
 8003090:	6826      	ldr	r6, [r4, #0]
 8003092:	1d1d      	adds	r5, r3, #4
 8003094:	6960      	ldr	r0, [r4, #20]
 8003096:	600d      	str	r5, [r1, #0]
 8003098:	0635      	lsls	r5, r6, #24
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	d501      	bpl.n	80030a2 <_printf_i+0x1ce>
 800309e:	6018      	str	r0, [r3, #0]
 80030a0:	e002      	b.n	80030a8 <_printf_i+0x1d4>
 80030a2:	0671      	lsls	r1, r6, #25
 80030a4:	d5fb      	bpl.n	800309e <_printf_i+0x1ca>
 80030a6:	8018      	strh	r0, [r3, #0]
 80030a8:	2300      	movs	r3, #0
 80030aa:	4616      	mov	r6, r2
 80030ac:	6123      	str	r3, [r4, #16]
 80030ae:	e7ba      	b.n	8003026 <_printf_i+0x152>
 80030b0:	680b      	ldr	r3, [r1, #0]
 80030b2:	1d1a      	adds	r2, r3, #4
 80030b4:	600a      	str	r2, [r1, #0]
 80030b6:	681e      	ldr	r6, [r3, #0]
 80030b8:	2100      	movs	r1, #0
 80030ba:	4630      	mov	r0, r6
 80030bc:	6862      	ldr	r2, [r4, #4]
 80030be:	f000 f82f 	bl	8003120 <memchr>
 80030c2:	b108      	cbz	r0, 80030c8 <_printf_i+0x1f4>
 80030c4:	1b80      	subs	r0, r0, r6
 80030c6:	6060      	str	r0, [r4, #4]
 80030c8:	6863      	ldr	r3, [r4, #4]
 80030ca:	6123      	str	r3, [r4, #16]
 80030cc:	2300      	movs	r3, #0
 80030ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030d2:	e7a8      	b.n	8003026 <_printf_i+0x152>
 80030d4:	4632      	mov	r2, r6
 80030d6:	4649      	mov	r1, r9
 80030d8:	4640      	mov	r0, r8
 80030da:	6923      	ldr	r3, [r4, #16]
 80030dc:	47d0      	blx	sl
 80030de:	3001      	adds	r0, #1
 80030e0:	d0ab      	beq.n	800303a <_printf_i+0x166>
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	079b      	lsls	r3, r3, #30
 80030e6:	d413      	bmi.n	8003110 <_printf_i+0x23c>
 80030e8:	68e0      	ldr	r0, [r4, #12]
 80030ea:	9b03      	ldr	r3, [sp, #12]
 80030ec:	4298      	cmp	r0, r3
 80030ee:	bfb8      	it	lt
 80030f0:	4618      	movlt	r0, r3
 80030f2:	e7a4      	b.n	800303e <_printf_i+0x16a>
 80030f4:	2301      	movs	r3, #1
 80030f6:	4632      	mov	r2, r6
 80030f8:	4649      	mov	r1, r9
 80030fa:	4640      	mov	r0, r8
 80030fc:	47d0      	blx	sl
 80030fe:	3001      	adds	r0, #1
 8003100:	d09b      	beq.n	800303a <_printf_i+0x166>
 8003102:	3501      	adds	r5, #1
 8003104:	68e3      	ldr	r3, [r4, #12]
 8003106:	9903      	ldr	r1, [sp, #12]
 8003108:	1a5b      	subs	r3, r3, r1
 800310a:	42ab      	cmp	r3, r5
 800310c:	dcf2      	bgt.n	80030f4 <_printf_i+0x220>
 800310e:	e7eb      	b.n	80030e8 <_printf_i+0x214>
 8003110:	2500      	movs	r5, #0
 8003112:	f104 0619 	add.w	r6, r4, #25
 8003116:	e7f5      	b.n	8003104 <_printf_i+0x230>
 8003118:	08003461 	.word	0x08003461
 800311c:	08003472 	.word	0x08003472

08003120 <memchr>:
 8003120:	4603      	mov	r3, r0
 8003122:	b510      	push	{r4, lr}
 8003124:	b2c9      	uxtb	r1, r1
 8003126:	4402      	add	r2, r0
 8003128:	4293      	cmp	r3, r2
 800312a:	4618      	mov	r0, r3
 800312c:	d101      	bne.n	8003132 <memchr+0x12>
 800312e:	2000      	movs	r0, #0
 8003130:	e003      	b.n	800313a <memchr+0x1a>
 8003132:	7804      	ldrb	r4, [r0, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	428c      	cmp	r4, r1
 8003138:	d1f6      	bne.n	8003128 <memchr+0x8>
 800313a:	bd10      	pop	{r4, pc}

0800313c <memcpy>:
 800313c:	440a      	add	r2, r1
 800313e:	4291      	cmp	r1, r2
 8003140:	f100 33ff 	add.w	r3, r0, #4294967295
 8003144:	d100      	bne.n	8003148 <memcpy+0xc>
 8003146:	4770      	bx	lr
 8003148:	b510      	push	{r4, lr}
 800314a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800314e:	4291      	cmp	r1, r2
 8003150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003154:	d1f9      	bne.n	800314a <memcpy+0xe>
 8003156:	bd10      	pop	{r4, pc}

08003158 <memmove>:
 8003158:	4288      	cmp	r0, r1
 800315a:	b510      	push	{r4, lr}
 800315c:	eb01 0402 	add.w	r4, r1, r2
 8003160:	d902      	bls.n	8003168 <memmove+0x10>
 8003162:	4284      	cmp	r4, r0
 8003164:	4623      	mov	r3, r4
 8003166:	d807      	bhi.n	8003178 <memmove+0x20>
 8003168:	1e43      	subs	r3, r0, #1
 800316a:	42a1      	cmp	r1, r4
 800316c:	d008      	beq.n	8003180 <memmove+0x28>
 800316e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003176:	e7f8      	b.n	800316a <memmove+0x12>
 8003178:	4601      	mov	r1, r0
 800317a:	4402      	add	r2, r0
 800317c:	428a      	cmp	r2, r1
 800317e:	d100      	bne.n	8003182 <memmove+0x2a>
 8003180:	bd10      	pop	{r4, pc}
 8003182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800318a:	e7f7      	b.n	800317c <memmove+0x24>

0800318c <_free_r>:
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	4605      	mov	r5, r0
 8003190:	2900      	cmp	r1, #0
 8003192:	d043      	beq.n	800321c <_free_r+0x90>
 8003194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003198:	1f0c      	subs	r4, r1, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	bfb8      	it	lt
 800319e:	18e4      	addlt	r4, r4, r3
 80031a0:	f000 f8d0 	bl	8003344 <__malloc_lock>
 80031a4:	4a1e      	ldr	r2, [pc, #120]	; (8003220 <_free_r+0x94>)
 80031a6:	6813      	ldr	r3, [r2, #0]
 80031a8:	4610      	mov	r0, r2
 80031aa:	b933      	cbnz	r3, 80031ba <_free_r+0x2e>
 80031ac:	6063      	str	r3, [r4, #4]
 80031ae:	6014      	str	r4, [r2, #0]
 80031b0:	4628      	mov	r0, r5
 80031b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031b6:	f000 b8cb 	b.w	8003350 <__malloc_unlock>
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	d90a      	bls.n	80031d4 <_free_r+0x48>
 80031be:	6821      	ldr	r1, [r4, #0]
 80031c0:	1862      	adds	r2, r4, r1
 80031c2:	4293      	cmp	r3, r2
 80031c4:	bf01      	itttt	eq
 80031c6:	681a      	ldreq	r2, [r3, #0]
 80031c8:	685b      	ldreq	r3, [r3, #4]
 80031ca:	1852      	addeq	r2, r2, r1
 80031cc:	6022      	streq	r2, [r4, #0]
 80031ce:	6063      	str	r3, [r4, #4]
 80031d0:	6004      	str	r4, [r0, #0]
 80031d2:	e7ed      	b.n	80031b0 <_free_r+0x24>
 80031d4:	461a      	mov	r2, r3
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b10b      	cbz	r3, 80031de <_free_r+0x52>
 80031da:	42a3      	cmp	r3, r4
 80031dc:	d9fa      	bls.n	80031d4 <_free_r+0x48>
 80031de:	6811      	ldr	r1, [r2, #0]
 80031e0:	1850      	adds	r0, r2, r1
 80031e2:	42a0      	cmp	r0, r4
 80031e4:	d10b      	bne.n	80031fe <_free_r+0x72>
 80031e6:	6820      	ldr	r0, [r4, #0]
 80031e8:	4401      	add	r1, r0
 80031ea:	1850      	adds	r0, r2, r1
 80031ec:	4283      	cmp	r3, r0
 80031ee:	6011      	str	r1, [r2, #0]
 80031f0:	d1de      	bne.n	80031b0 <_free_r+0x24>
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4401      	add	r1, r0
 80031f8:	6011      	str	r1, [r2, #0]
 80031fa:	6053      	str	r3, [r2, #4]
 80031fc:	e7d8      	b.n	80031b0 <_free_r+0x24>
 80031fe:	d902      	bls.n	8003206 <_free_r+0x7a>
 8003200:	230c      	movs	r3, #12
 8003202:	602b      	str	r3, [r5, #0]
 8003204:	e7d4      	b.n	80031b0 <_free_r+0x24>
 8003206:	6820      	ldr	r0, [r4, #0]
 8003208:	1821      	adds	r1, r4, r0
 800320a:	428b      	cmp	r3, r1
 800320c:	bf01      	itttt	eq
 800320e:	6819      	ldreq	r1, [r3, #0]
 8003210:	685b      	ldreq	r3, [r3, #4]
 8003212:	1809      	addeq	r1, r1, r0
 8003214:	6021      	streq	r1, [r4, #0]
 8003216:	6063      	str	r3, [r4, #4]
 8003218:	6054      	str	r4, [r2, #4]
 800321a:	e7c9      	b.n	80031b0 <_free_r+0x24>
 800321c:	bd38      	pop	{r3, r4, r5, pc}
 800321e:	bf00      	nop
 8003220:	20000090 	.word	0x20000090

08003224 <_malloc_r>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	1ccd      	adds	r5, r1, #3
 8003228:	f025 0503 	bic.w	r5, r5, #3
 800322c:	3508      	adds	r5, #8
 800322e:	2d0c      	cmp	r5, #12
 8003230:	bf38      	it	cc
 8003232:	250c      	movcc	r5, #12
 8003234:	2d00      	cmp	r5, #0
 8003236:	4606      	mov	r6, r0
 8003238:	db01      	blt.n	800323e <_malloc_r+0x1a>
 800323a:	42a9      	cmp	r1, r5
 800323c:	d903      	bls.n	8003246 <_malloc_r+0x22>
 800323e:	230c      	movs	r3, #12
 8003240:	6033      	str	r3, [r6, #0]
 8003242:	2000      	movs	r0, #0
 8003244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003246:	f000 f87d 	bl	8003344 <__malloc_lock>
 800324a:	4921      	ldr	r1, [pc, #132]	; (80032d0 <_malloc_r+0xac>)
 800324c:	680a      	ldr	r2, [r1, #0]
 800324e:	4614      	mov	r4, r2
 8003250:	b99c      	cbnz	r4, 800327a <_malloc_r+0x56>
 8003252:	4f20      	ldr	r7, [pc, #128]	; (80032d4 <_malloc_r+0xb0>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b923      	cbnz	r3, 8003262 <_malloc_r+0x3e>
 8003258:	4621      	mov	r1, r4
 800325a:	4630      	mov	r0, r6
 800325c:	f000 f862 	bl	8003324 <_sbrk_r>
 8003260:	6038      	str	r0, [r7, #0]
 8003262:	4629      	mov	r1, r5
 8003264:	4630      	mov	r0, r6
 8003266:	f000 f85d 	bl	8003324 <_sbrk_r>
 800326a:	1c43      	adds	r3, r0, #1
 800326c:	d123      	bne.n	80032b6 <_malloc_r+0x92>
 800326e:	230c      	movs	r3, #12
 8003270:	4630      	mov	r0, r6
 8003272:	6033      	str	r3, [r6, #0]
 8003274:	f000 f86c 	bl	8003350 <__malloc_unlock>
 8003278:	e7e3      	b.n	8003242 <_malloc_r+0x1e>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	1b5b      	subs	r3, r3, r5
 800327e:	d417      	bmi.n	80032b0 <_malloc_r+0x8c>
 8003280:	2b0b      	cmp	r3, #11
 8003282:	d903      	bls.n	800328c <_malloc_r+0x68>
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	441c      	add	r4, r3
 8003288:	6025      	str	r5, [r4, #0]
 800328a:	e004      	b.n	8003296 <_malloc_r+0x72>
 800328c:	6863      	ldr	r3, [r4, #4]
 800328e:	42a2      	cmp	r2, r4
 8003290:	bf0c      	ite	eq
 8003292:	600b      	streq	r3, [r1, #0]
 8003294:	6053      	strne	r3, [r2, #4]
 8003296:	4630      	mov	r0, r6
 8003298:	f000 f85a 	bl	8003350 <__malloc_unlock>
 800329c:	f104 000b 	add.w	r0, r4, #11
 80032a0:	1d23      	adds	r3, r4, #4
 80032a2:	f020 0007 	bic.w	r0, r0, #7
 80032a6:	1ac2      	subs	r2, r0, r3
 80032a8:	d0cc      	beq.n	8003244 <_malloc_r+0x20>
 80032aa:	1a1b      	subs	r3, r3, r0
 80032ac:	50a3      	str	r3, [r4, r2]
 80032ae:	e7c9      	b.n	8003244 <_malloc_r+0x20>
 80032b0:	4622      	mov	r2, r4
 80032b2:	6864      	ldr	r4, [r4, #4]
 80032b4:	e7cc      	b.n	8003250 <_malloc_r+0x2c>
 80032b6:	1cc4      	adds	r4, r0, #3
 80032b8:	f024 0403 	bic.w	r4, r4, #3
 80032bc:	42a0      	cmp	r0, r4
 80032be:	d0e3      	beq.n	8003288 <_malloc_r+0x64>
 80032c0:	1a21      	subs	r1, r4, r0
 80032c2:	4630      	mov	r0, r6
 80032c4:	f000 f82e 	bl	8003324 <_sbrk_r>
 80032c8:	3001      	adds	r0, #1
 80032ca:	d1dd      	bne.n	8003288 <_malloc_r+0x64>
 80032cc:	e7cf      	b.n	800326e <_malloc_r+0x4a>
 80032ce:	bf00      	nop
 80032d0:	20000090 	.word	0x20000090
 80032d4:	20000094 	.word	0x20000094

080032d8 <_realloc_r>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	4607      	mov	r7, r0
 80032dc:	4614      	mov	r4, r2
 80032de:	460e      	mov	r6, r1
 80032e0:	b921      	cbnz	r1, 80032ec <_realloc_r+0x14>
 80032e2:	4611      	mov	r1, r2
 80032e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032e8:	f7ff bf9c 	b.w	8003224 <_malloc_r>
 80032ec:	b922      	cbnz	r2, 80032f8 <_realloc_r+0x20>
 80032ee:	f7ff ff4d 	bl	800318c <_free_r>
 80032f2:	4625      	mov	r5, r4
 80032f4:	4628      	mov	r0, r5
 80032f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032f8:	f000 f830 	bl	800335c <_malloc_usable_size_r>
 80032fc:	42a0      	cmp	r0, r4
 80032fe:	d20f      	bcs.n	8003320 <_realloc_r+0x48>
 8003300:	4621      	mov	r1, r4
 8003302:	4638      	mov	r0, r7
 8003304:	f7ff ff8e 	bl	8003224 <_malloc_r>
 8003308:	4605      	mov	r5, r0
 800330a:	2800      	cmp	r0, #0
 800330c:	d0f2      	beq.n	80032f4 <_realloc_r+0x1c>
 800330e:	4631      	mov	r1, r6
 8003310:	4622      	mov	r2, r4
 8003312:	f7ff ff13 	bl	800313c <memcpy>
 8003316:	4631      	mov	r1, r6
 8003318:	4638      	mov	r0, r7
 800331a:	f7ff ff37 	bl	800318c <_free_r>
 800331e:	e7e9      	b.n	80032f4 <_realloc_r+0x1c>
 8003320:	4635      	mov	r5, r6
 8003322:	e7e7      	b.n	80032f4 <_realloc_r+0x1c>

08003324 <_sbrk_r>:
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	2300      	movs	r3, #0
 8003328:	4d05      	ldr	r5, [pc, #20]	; (8003340 <_sbrk_r+0x1c>)
 800332a:	4604      	mov	r4, r0
 800332c:	4608      	mov	r0, r1
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	f7fd fbb0 	bl	8000a94 <_sbrk>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d102      	bne.n	800333e <_sbrk_r+0x1a>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	b103      	cbz	r3, 800333e <_sbrk_r+0x1a>
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	bd38      	pop	{r3, r4, r5, pc}
 8003340:	20000194 	.word	0x20000194

08003344 <__malloc_lock>:
 8003344:	4801      	ldr	r0, [pc, #4]	; (800334c <__malloc_lock+0x8>)
 8003346:	f000 b811 	b.w	800336c <__retarget_lock_acquire_recursive>
 800334a:	bf00      	nop
 800334c:	2000019c 	.word	0x2000019c

08003350 <__malloc_unlock>:
 8003350:	4801      	ldr	r0, [pc, #4]	; (8003358 <__malloc_unlock+0x8>)
 8003352:	f000 b80c 	b.w	800336e <__retarget_lock_release_recursive>
 8003356:	bf00      	nop
 8003358:	2000019c 	.word	0x2000019c

0800335c <_malloc_usable_size_r>:
 800335c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003360:	1f18      	subs	r0, r3, #4
 8003362:	2b00      	cmp	r3, #0
 8003364:	bfbc      	itt	lt
 8003366:	580b      	ldrlt	r3, [r1, r0]
 8003368:	18c0      	addlt	r0, r0, r3
 800336a:	4770      	bx	lr

0800336c <__retarget_lock_acquire_recursive>:
 800336c:	4770      	bx	lr

0800336e <__retarget_lock_release_recursive>:
 800336e:	4770      	bx	lr

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
